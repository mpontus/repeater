{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAAA,IAAM,EAAS,IAAI,OAAO,iDAEtB,EAAW,IAAI,aAEf,EAA6C,KAEjD,EAAO,UAAY,SAAA,GACT,OAAA,EAAE,KAAK,MACR,IAAA,QACY,EAAA,EAAS,qBAElB,IAAA,EAAS,EAAE,KAAK,QAChB,EAAc,EAAS,aAC3B,EACA,EAAO,OACP,EAAS,YAGC,EAAA,cAAc,EAAQ,EAAG,GAExB,EAAA,OAAS,EACT,EAAA,QAAQ,EAAS,aACjB,EAAA,QAEb,MAGG,IAAA,OACkB,OAAjB,IACW,EAAA,WAAW,EAAS,aACpB,EAAA,UAQrB,UAAU,aACP,aAAa,CAGL,OAAA,EACA,OAAA,IAER,KAAK,SAAC,GACC,IAAA,EAAS,EAAS,wBAAwB,GAE1C,EAAkB,EAAS,sBAAsB,MAAO,EAAG,GAEjD,EAAA,eAAiB,SAAC,GACxB,IACF,EADE,EAAA,YACiB,eAAe,GAEjC,EAAA,YAAY,IAGd,EAAA,QAAQ,GAET,IAAA,EAAO,EAAS,aACjB,EAAA,KAAK,MAAQ,EAEF,EAAA,QAAQ,GAEnB,EAAA,QAAQ,EAAS","file":"repeater.79d24dc9.map","sourceRoot":"..","sourcesContent":["const worker = new Worker(\"./worker.ts\");\n\nvar audioCtx = new AudioContext();\n\nlet bufferSource: AudioBufferSourceNode | null = null;\n\nworker.onmessage = e => {\n  switch (e.data.type) {\n    case \"start\": {\n      bufferSource = audioCtx.createBufferSource();\n\n      const buffer = e.data.payload;\n      const audioBuffer = audioCtx.createBuffer(\n        1,\n        buffer.length,\n        audioCtx.sampleRate\n      );\n\n      audioBuffer.copyToChannel(buffer, 0, 0);\n\n      bufferSource.buffer = audioBuffer;\n      bufferSource.connect(audioCtx.destination);\n      bufferSource.start();\n\n      break;\n    }\n\n    case \"stop\": {\n      if (bufferSource !== null) {\n        bufferSource.disconnect(audioCtx.destination);\n        bufferSource.stop();\n      }\n\n      break;\n    }\n  }\n};\n\nnavigator.mediaDevices\n  .getUserMedia({\n    // TODO: specify number of channels\n\n    audio: true,\n    video: false\n  })\n  .then((stream: MediaStream) => {\n    const source = audioCtx.createMediaStreamSource(stream);\n\n    const scriptProcessor = audioCtx.createScriptProcessor(16384, 1, 1);\n\n    scriptProcessor.onaudioprocess = (e: AudioProcessingEvent) => {\n      const { inputBuffer } = e;\n      const data = inputBuffer.getChannelData(0);\n\n      worker.postMessage(data);\n    };\n\n    source.connect(scriptProcessor);\n\n    const mute = audioCtx.createGain();\n    mute.gain.value = 0;\n\n    scriptProcessor.connect(mute);\n\n    mute.connect(audioCtx.destination);\n  });\n"]}
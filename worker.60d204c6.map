{"version":3,"sources":["worker.ts"],"names":[],"mappings":";AAAA,IAAM,EAAc,KAEd,EAAY,IAEZ,EAAkB,GAClB,EAAa,MAEb,EAAS,IAAI,aAAa,EAAkB,GAC9C,EAAS,EACT,GAAmB,EAEjB,EAAiB,SAAC,GACtB,OAAA,EAAQ,OAAO,SAAC,EAAG,GAAM,OAAA,EAAI,KAAK,IAAI,IAAI,GAAK,GAEjD,EAAI,UAAY,SAAA,GACR,IAAA,EAAoB,EAAE,KAKtB,EAAa,EAAe,GAW9B,GATC,GACC,IACiB,GAAA,EACZ,EAAA,KAAK,GAER,EAAA,YAAY,CAAE,KAAM,UAIxB,EAAkB,CAChB,GAAA,EAAS,EAAI,OAAS,EAAO,OAC/B,OAGK,EAAA,IAAI,EAAK,GACN,GAAA,EAAI,OAGZ,IACG,IACgB,GAAA,EACf,EAAA,YAAY,CAAE,KAAM,QAAS,QAAS,IACjC,EAAA","file":"worker.60d204c6.map","sourceRoot":"..","sourcesContent":["const ctx: Worker = self as any;\n\nconst THRESHOLD = 200;\n\nconst lengthInSeconds = 60;\nconst sampleRate = 44100;\n\nconst buffer = new Float32Array(lengthInSeconds * sampleRate); // 44100 * seconds\nlet offset = 0;\nlet recordingStarted = false;\n\nconst isHearingVoice = (samples: Float32Array) =>\n  samples.reduce((a, b) => a + Math.abs(b), 0) > THRESHOLD;\n\nctx.onmessage = e => {\n  const pcm: Float32Array = e.data; // 4096\n\n  // const averageIntensity =\n  //   pcm.map(Math.abs).reduce((acc, val) => acc + val, 0) / pcm.length;\n\n  const loudEnough = isHearingVoice(pcm);\n\n  if (!recordingStarted) {\n    if (loudEnough) {\n      recordingStarted = true;\n      buffer.fill(0);\n\n      ctx.postMessage({ type: \"stop\" });\n    }\n  }\n\n  if (recordingStarted) {\n    if (offset + pcm.length > buffer.length) {\n      return;\n    }\n\n    buffer.set(pcm, offset);\n    offset += pcm.length;\n  }\n\n  if (recordingStarted) {\n    if (!loudEnough) {\n      recordingStarted = false;\n      ctx.postMessage({ type: \"start\", payload: buffer });\n      offset = 0;\n    }\n  }\n};\n"]}
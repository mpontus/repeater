{"version":3,"sources":["node_modules/symbol-observable/es/ponyfill.js","node_modules/symbol-observable/es/index.js","src/index.ts","../src/extra/dropRepeats.ts","src/worker/CircularBuffer.ts","src/utils.ts","src/worker/AverageAmplitude.ts","src/worker/index.ts"],"names":["symbolObservablePonyfill","root","result","Symbol","observable","_ponyfill","_interopRequireDefault","require","obj","__esModule","default","self","window","global","module","Function","ponyfill","_default","exports"],"mappings":"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","file":"worker.1e6ad932.js","sourceRoot":"..","sourcesContent":["export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","import $$observable from 'symbol-observable';\n\nconst NO = {};\nfunction noop() {}\n\nfunction cp<T>(a: Array<T>): Array<T> {\n  const l = a.length;\n  const b = Array(l);\n  for (let i = 0; i < l; ++i) b[i] = a[i];\n  return b;\n}\n\nfunction and<T>(f1: (t: T) => boolean, f2: (t: T) => boolean): (t: T) => boolean {\n  return function andFn(t: T): boolean {\n    return f1(t) && f2(t);\n  };\n}\n\ninterface FContainer<T, R> {\n  f(t: T): R;\n}\n\nfunction _try<T, R>(c: FContainer<T, R>, t: T, u: Stream<any>): R | {} {\n  try {\n    return c.f(t);\n  } catch (e) {\n    u._e(e);\n    return NO;\n  }\n}\n\nexport interface InternalListener<T> {\n  _n: (v: T) => void;\n  _e: (err: any) => void;\n  _c: () => void;\n}\n\nconst NO_IL: InternalListener<any> = {\n  _n: noop,\n  _e: noop,\n  _c: noop,\n};\n\nexport interface InternalProducer<T> {\n  _start(listener: InternalListener<T>): void;\n  _stop: () => void;\n}\n\nexport interface OutSender<T> {\n  out: Stream<T>;\n}\n\nexport interface Operator<T, R> extends InternalProducer<R>, InternalListener<T>, OutSender<R> {\n  type: string;\n  ins: Stream<T>;\n  _start(out: Stream<R>): void;\n}\n\nexport interface Aggregator<T, U> extends InternalProducer<U>, OutSender<U> {\n  type: string;\n  insArr: Array<Stream<T>>;\n  _start(out: Stream<U>): void;\n}\n\nexport interface Producer<T> {\n  start: (listener: Listener<T>) => void;\n  stop: () => void;\n}\n\nexport interface Listener<T> {\n  next: (x: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport interface Subscription {\n  unsubscribe(): void;\n}\n\nexport interface Observable<T> {\n  subscribe(listener: Listener<T>): Subscription;\n}\n\n// mutates the input\nfunction internalizeProducer<T>(producer: Producer<T> & Partial<InternalProducer<T>>) {\n  producer._start = function _start(il: InternalListener<T> & Partial<Listener<T>>) {\n    il.next = il._n;\n    il.error = il._e;\n    il.complete = il._c;\n    this.start(il);\n  };\n  producer._stop = producer.stop;\n}\n\nclass StreamSub<T> implements Subscription {\n  constructor(private _stream: Stream<T>, private _listener: InternalListener<T>) {}\n\n  unsubscribe(): void {\n    this._stream._remove(this._listener);\n  }\n}\n\nclass Observer<T> implements Listener<T> {\n  constructor(private _listener: InternalListener<T>) {}\n\n  next(value: T) {\n    this._listener._n(value);\n  }\n\n  error(err: any) {\n    this._listener._e(err);\n  }\n\n  complete() {\n    this._listener._c();\n  }\n}\n\nclass FromObservable<T> implements InternalProducer<T> {\n  public type = 'fromObservable';\n  public ins: Observable<T>;\n  public out: Stream<T>;\n  private active: boolean;\n  private _sub: Subscription | undefined;\n\n  constructor(observable: Observable<T>) {\n    this.ins = observable;\n    this.active = false;\n  }\n\n  _start(out: Stream<T>) {\n    this.out = out;\n    this.active = true;\n    this._sub = this.ins.subscribe(new Observer(out));\n    if (!this.active) this._sub.unsubscribe();\n  }\n\n  _stop() {\n    if (this._sub) this._sub.unsubscribe();\n    this.active = false;\n  }\n}\n\nexport interface MergeSignature {\n  (): Stream<any>;\n  <T1>(s1: Stream<T1>): Stream<T1>;\n  <T1, T2>(\n    s1: Stream<T1>,\n    s2: Stream<T2>): Stream<T1 | T2>;\n  <T1, T2, T3>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>): Stream<T1 | T2 | T3>;\n  <T1, T2, T3, T4>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>): Stream<T1 | T2 | T3 | T4>;\n  <T1, T2, T3, T4, T5>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>): Stream<T1 | T2 | T3 | T4 | T5>;\n  <T1, T2, T3, T4, T5, T6>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>): Stream<T1 | T2 | T3 | T4 | T5 | T6>;\n  <T1, T2, T3, T4, T5, T6, T7>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7>;\n  <T1, T2, T3, T4, T5, T6, T7, T8>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>,\n    s10: Stream<T10>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10>;\n  <T>(...stream: Array<Stream<T>>): Stream<T>;\n}\n\nclass Merge<T> implements Aggregator<T, T>, InternalListener<T> {\n  public type = 'merge';\n  public insArr: Array<Stream<T>>;\n  public out: Stream<T>;\n  private ac: number; // ac is activeCount\n\n  constructor(insArr: Array<Stream<T>>) {\n    this.insArr = insArr;\n    this.out = NO as Stream<T>;\n    this.ac = 0;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    const s = this.insArr;\n    const L = s.length;\n    this.ac = L;\n    for (let i = 0; i < L; i++) s[i]._add(this);\n  }\n\n  _stop(): void {\n    const s = this.insArr;\n    const L = s.length;\n    for (let i = 0; i < L; i++) s[i]._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    if (--this.ac <= 0) {\n      const u = this.out;\n      if (u === NO) return;\n      u._c();\n    }\n  }\n}\n\nexport interface CombineSignature {\n  (): Stream<Array<any>>;\n  <T1>(s1: Stream<T1>): Stream<[T1]>;\n  <T1, T2>(\n    s1: Stream<T1>,\n    s2: Stream<T2>): Stream<[T1, T2]>;\n  <T1, T2, T3>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>): Stream<[T1, T2, T3]>;\n  <T1, T2, T3, T4>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>): Stream<[T1, T2, T3, T4]>;\n  <T1, T2, T3, T4, T5>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>): Stream<[T1, T2, T3, T4, T5]>;\n  <T1, T2, T3, T4, T5, T6>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>): Stream<[T1, T2, T3, T4, T5, T6]>;\n  <T1, T2, T3, T4, T5, T6, T7>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>): Stream<[T1, T2, T3, T4, T5, T6, T7]>;\n  <T1, T2, T3, T4, T5, T6, T7, T8>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>): Stream<[T1, T2, T3, T4, T5, T6, T7, T8]>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>): Stream<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>,\n    s10: Stream<T10>): Stream<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\n  (...stream: Array<Stream<any>>): Stream<Array<any>>;\n}\n\nclass CombineListener<T> implements InternalListener<T>, OutSender<Array<T>> {\n  private i: number;\n  public out: Stream<Array<T>>;\n  private p: Combine<T>;\n\n  constructor(i: number, out: Stream<Array<T>>, p: Combine<T>) {\n    this.i = i;\n    this.out = out;\n    this.p = p;\n    p.ils.push(this);\n  }\n\n  _n(t: T): void {\n    const p = this.p, out = this.out;\n    if (out === NO) return;\n    if (p.up(t, this.i)) {\n      const a = p.vals;\n      const l = a.length;\n      const b = Array(l);\n      for (let i = 0; i < l; ++i) b[i] = a[i];\n      out._n(b);\n    }\n  }\n\n  _e(err: any): void {\n    const out = this.out;\n    if (out === NO) return;\n    out._e(err);\n  }\n\n  _c(): void {\n    const p = this.p;\n    if (p.out === NO) return;\n    if (--p.Nc === 0) p.out._c();\n  }\n}\n\nclass Combine<R> implements Aggregator<any, Array<R>> {\n  public type = 'combine';\n  public insArr: Array<Stream<any>>;\n  public out: Stream<Array<R>>;\n  public ils: Array<CombineListener<any>>;\n  public Nc: number; // *N*umber of streams still to send *c*omplete\n  public Nn: number; // *N*umber of streams still to send *n*ext\n  public vals: Array<R>;\n\n  constructor(insArr: Array<Stream<any>>) {\n    this.insArr = insArr;\n    this.out = NO as Stream<Array<R>>;\n    this.ils = [];\n    this.Nc = this.Nn = 0;\n    this.vals = [];\n  }\n\n  up(t: any, i: number): boolean {\n    const v = this.vals[i];\n    const Nn = !this.Nn ? 0 : v === NO ? --this.Nn : this.Nn;\n    this.vals[i] = t;\n    return Nn === 0;\n  }\n\n  _start(out: Stream<Array<R>>): void {\n    this.out = out;\n    const s = this.insArr;\n    const n = this.Nc = this.Nn = s.length;\n    const vals = this.vals = new Array(n);\n    if (n === 0) {\n      out._n([]);\n      out._c();\n    } else {\n      for (let i = 0; i < n; i++) {\n        vals[i] = NO;\n        s[i]._add(new CombineListener(i, out, this));\n      }\n    }\n  }\n\n  _stop(): void {\n    const s = this.insArr;\n    const n = s.length;\n    const ils = this.ils;\n    for (let i = 0; i < n; i++) s[i]._remove(ils[i]);\n    this.out = NO as Stream<Array<R>>;\n    this.ils = [];\n    this.vals = [];\n  }\n}\n\nclass FromArray<T> implements InternalProducer<T> {\n  public type = 'fromArray';\n  public a: Array<T>;\n\n  constructor(a: Array<T>) {\n    this.a = a;\n  }\n\n  _start(out: InternalListener<T>): void {\n    const a = this.a;\n    for (let i = 0, n = a.length; i < n; i++) out._n(a[i]);\n    out._c();\n  }\n\n  _stop(): void {\n  }\n}\n\nclass FromPromise<T> implements InternalProducer<T> {\n  public type = 'fromPromise';\n  public on: boolean;\n  public p: PromiseLike<T>;\n\n  constructor(p: PromiseLike<T>) {\n    this.on = false;\n    this.p = p;\n  }\n\n  _start(out: InternalListener<T>): void {\n    const prod = this;\n    this.on = true;\n    this.p.then(\n      (v: T) => {\n        if (prod.on) {\n          out._n(v);\n          out._c();\n        }\n      },\n      (e: any) => {\n        out._e(e);\n      },\n    ).then(noop, (err: any) => {\n      setTimeout(() => { throw err; });\n    });\n  }\n\n  _stop(): void {\n    this.on = false;\n  }\n}\n\nclass Periodic implements InternalProducer<number> {\n  public type = 'periodic';\n  public period: number;\n  private intervalID: any;\n  private i: number;\n\n  constructor(period: number) {\n    this.period = period;\n    this.intervalID = -1;\n    this.i = 0;\n  }\n\n  _start(out: InternalListener<number>): void {\n    const self = this;\n    function intervalHandler() { out._n(self.i++); }\n    this.intervalID = setInterval(intervalHandler, this.period);\n  }\n\n  _stop(): void {\n    if (this.intervalID !== -1) clearInterval(this.intervalID);\n    this.intervalID = -1;\n    this.i = 0;\n  }\n}\n\nclass Debug<T> implements Operator<T, T> {\n  public type = 'debug';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  private s: (t: T) => any; // spy\n  private l: string; // label\n\n  constructor(ins: Stream<T>);\n  constructor(ins: Stream<T>, arg?: string);\n  constructor(ins: Stream<T>, arg?: (t: T) => any);\n  constructor(ins: Stream<T>, arg?: string | ((t: T) => any));\n  constructor(ins: Stream<T>, arg?: string | ((t: T) => any) | undefined) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.s = noop;\n    this.l = '';\n    if (typeof arg === 'string') this.l = arg; else if (typeof arg === 'function') this.s = arg;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const s = this.s, l = this.l;\n    if (s !== noop) {\n      try {\n        s(t);\n      } catch (e) {\n        u._e(e);\n      }\n    } else if (l) console.log(l + ':', t); else console.log(t);\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass Drop<T> implements Operator<T, T> {\n  public type = 'drop';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public max: number;\n  private dropped: number;\n\n  constructor(max: number, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.max = max;\n    this.dropped = 0;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.dropped = 0;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    if (this.dropped++ >= this.max) u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass EndWhenListener<T> implements InternalListener<any> {\n  private out: Stream<T>;\n  private op: EndWhen<T>;\n\n  constructor(out: Stream<T>, op: EndWhen<T>) {\n    this.out = out;\n    this.op = op;\n  }\n\n  _n() {\n    this.op.end();\n  }\n\n  _e(err: any) {\n    this.out._e(err);\n  }\n\n  _c() {\n    this.op.end();\n  }\n}\n\nclass EndWhen<T> implements Operator<T, T> {\n  public type = 'endWhen';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public o: Stream<any>; // o = other\n  private oil: InternalListener<any>; // oil = other InternalListener\n\n  constructor(o: Stream<any>, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.o = o;\n    this.oil = NO_IL;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.o._add(this.oil = new EndWhenListener(out, this));\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.o._remove(this.oil);\n    this.out = NO as Stream<T>;\n    this.oil = NO_IL;\n  }\n\n  end(): void {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    this.end();\n  }\n}\n\nclass Filter<T> implements Operator<T, T> {\n  public type = 'filter';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public f: (t: T) => boolean;\n\n  constructor(passes: (t: T) => boolean, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.f = passes;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const r = _try(this, t, u);\n    if (r === NO || !r) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass FlattenListener<T> implements InternalListener<T> {\n  private out: Stream<T>;\n  private op: Flatten<T>;\n\n  constructor(out: Stream<T>, op: Flatten<T>) {\n    this.out = out;\n    this.op = op;\n  }\n\n  _n(t: T) {\n    this.out._n(t);\n  }\n\n  _e(err: any) {\n    this.out._e(err);\n  }\n\n  _c() {\n    this.op.inner = NO as Stream<T>;\n    this.op.less();\n  }\n}\n\nclass Flatten<T> implements Operator<Stream<T>, T> {\n  public type = 'flatten';\n  public ins: Stream<Stream<T>>;\n  public out: Stream<T>;\n  private open: boolean;\n  public inner: Stream<T>; // Current inner Stream\n  private il: InternalListener<T>; // Current inner InternalListener\n\n  constructor(ins: Stream<Stream<T>>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.open = true;\n    this.inner = NO as Stream<T>;\n    this.il = NO_IL;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.open = true;\n    this.inner = NO as Stream<T>;\n    this.il = NO_IL;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    if (this.inner !== NO) this.inner._remove(this.il);\n    this.out = NO as Stream<T>;\n    this.open = true;\n    this.inner = NO as Stream<T>;\n    this.il = NO_IL;\n  }\n\n  less(): void {\n    const u = this.out;\n    if (u === NO) return;\n    if (!this.open && this.inner === NO) u._c();\n  }\n\n  _n(s: Stream<T>) {\n    const u = this.out;\n    if (u === NO) return;\n    const {inner, il} = this;\n    if (inner !== NO && il !== NO_IL) inner._remove(il);\n    (this.inner = s)._add(this.il = new FlattenListener(u, this));\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    this.open = false;\n    this.less();\n  }\n}\n\nclass Fold<T, R> implements Operator<T, R> {\n  public type = 'fold';\n  public ins: Stream<T>;\n  public out: Stream<R>;\n  public f: (t: T) => R;\n  public seed: R;\n  private acc: R; // initialized as seed\n\n  constructor(f: (acc: R, t: T) => R, seed: R, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<R>;\n    this.f = (t: T) => f(this.acc, t);\n    this.acc = this.seed = seed;\n  }\n\n  _start(out: Stream<R>): void {\n    this.out = out;\n    this.acc = this.seed;\n    out._n(this.acc);\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<R>;\n    this.acc = this.seed;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const r = _try(this, t, u);\n    if (r === NO) return;\n    u._n(this.acc = r as R);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass Last<T> implements Operator<T, T> {\n  public type = 'last';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  private has: boolean;\n  private val: T;\n\n  constructor(ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.has = false;\n    this.val = NO as T;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.has = false;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n    this.val = NO as T;\n  }\n\n  _n(t: T) {\n    this.has = true;\n    this.val = t;\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    if (this.has) {\n      u._n(this.val);\n      u._c();\n    } else u._e(new Error('last() failed because input stream completed'));\n  }\n}\n\nclass MapOp<T, R> implements Operator<T, R> {\n  public type = 'map';\n  public ins: Stream<T>;\n  public out: Stream<R>;\n  public f: (t: T) => R;\n\n  constructor(project: (t: T) => R, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<R>;\n    this.f = project;\n  }\n\n  _start(out: Stream<R>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<R>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const r = _try(this, t, u);\n    if (r === NO) return;\n    u._n(r as R);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass Remember<T> implements InternalProducer<T> {\n  public type = 'remember';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n\n  constructor(ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(out);\n  }\n\n  _stop(): void {\n    this.ins._remove(this.out);\n    this.out = NO as Stream<T>;\n  }\n}\n\nclass ReplaceError<T> implements Operator<T, T> {\n  public type = 'replaceError';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public f: (err: any) => Stream<T>;\n\n  constructor(replacer: (err: any) => Stream<T>, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.f = replacer;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    try {\n      this.ins._remove(this);\n      (this.ins = this.f(err))._add(this);\n    } catch (e) {\n      u._e(e);\n    }\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass StartWith<T> implements InternalProducer<T> {\n  public type = 'startWith';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public val: T;\n\n  constructor(ins: Stream<T>, val: T) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.val = val;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.out._n(this.val);\n    this.ins._add(out);\n  }\n\n  _stop(): void {\n    this.ins._remove(this.out);\n    this.out = NO as Stream<T>;\n  }\n}\n\nclass Take<T> implements Operator<T, T> {\n  public type = 'take';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public max: number;\n  private taken: number;\n\n  constructor(max: number, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.max = max;\n    this.taken = 0;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.taken = 0;\n    if (this.max <= 0) out._c(); else this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const m = ++this.taken;\n    if (m < this.max) u._n(t); else if (m === this.max) {\n      u._n(t);\n      u._c();\n    }\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nexport class Stream<T> implements InternalListener<T> {\n  public _prod: InternalProducer<T>;\n  protected _ils: Array<InternalListener<T>>; // 'ils' = Internal listeners\n  protected _stopID: any;\n  protected _dl: InternalListener<T>; // the debug listener\n  protected _d: boolean; // flag indicating the existence of the debug listener\n  protected _target: Stream<T>; // imitation target if this Stream will imitate\n  protected _err: any;\n\n  constructor(producer?: InternalProducer<T>) {\n    this._prod = producer || NO as InternalProducer<T>;\n    this._ils = [];\n    this._stopID = NO;\n    this._dl = NO as InternalListener<T>;\n    this._d = false;\n    this._target = NO as Stream<T>;\n    this._err = NO;\n  }\n\n  _n(t: T): void {\n    const a = this._ils;\n    const L = a.length;\n    if (this._d) this._dl._n(t);\n    if (L == 1) a[0]._n(t); else if (L == 0) return; else {\n      const b = cp(a);\n      for (let i = 0; i < L; i++) b[i]._n(t);\n    }\n  }\n\n  _e(err: any): void {\n    if (this._err !== NO) return;\n    this._err = err;\n    const a = this._ils;\n    const L = a.length;\n    this._x();\n    if (this._d) this._dl._e(err);\n    if (L == 1) a[0]._e(err); else if (L == 0) return; else {\n      const b = cp(a);\n      for (let i = 0; i < L; i++) b[i]._e(err);\n    }\n    if (!this._d && L == 0) throw this._err;\n  }\n\n  _c(): void {\n    const a = this._ils;\n    const L = a.length;\n    this._x();\n    if (this._d) this._dl._c();\n    if (L == 1) a[0]._c(); else if (L == 0) return; else {\n      const b = cp(a);\n      for (let i = 0; i < L; i++) b[i]._c();\n    }\n  }\n\n  _x(): void { // tear down logic, after error or complete\n    if (this._ils.length === 0) return;\n    if (this._prod !== NO) this._prod._stop();\n    this._err = NO;\n    this._ils = [];\n  }\n\n  _stopNow() {\n    // WARNING: code that calls this method should\n    // first check if this._prod is valid (not `NO`)\n    this._prod._stop();\n    this._err = NO;\n    this._stopID = NO;\n  }\n\n  _add(il: InternalListener<T>): void {\n    const ta = this._target;\n    if (ta !== NO) return ta._add(il);\n    const a = this._ils;\n    a.push(il);\n    if (a.length > 1) return;\n    if (this._stopID !== NO) {\n      clearTimeout(this._stopID);\n      this._stopID = NO;\n    } else {\n      const p = this._prod;\n      if (p !== NO) p._start(this);\n    }\n  }\n\n  _remove(il: InternalListener<T>): void {\n    const ta = this._target;\n    if (ta !== NO) return ta._remove(il);\n    const a = this._ils;\n    const i = a.indexOf(il);\n    if (i > -1) {\n      a.splice(i, 1);\n      if (this._prod !== NO && a.length <= 0) {\n        this._err = NO;\n        this._stopID = setTimeout(() => this._stopNow());\n      } else if (a.length === 1) {\n        this._pruneCycles();\n      }\n    }\n  }\n\n  // If all paths stemming from `this` stream eventually end at `this`\n  // stream, then we remove the single listener of `this` stream, to\n  // force it to end its execution and dispose resources. This method\n  // assumes as a precondition that this._ils has just one listener.\n  _pruneCycles() {\n    if (this._hasNoSinks(this, [])) this._remove(this._ils[0]);\n  }\n\n  // Checks whether *there is no* path starting from `x` that leads to an end\n  // listener (sink) in the stream graph, following edges A->B where B is a\n  // listener of A. This means these paths constitute a cycle somehow. Is given\n  // a trace of all visited nodes so far.\n  _hasNoSinks(x: InternalListener<any>, trace: Array<any>): boolean {\n    if (trace.indexOf(x) !== -1)\n      return true; else\n    if ((x as any as OutSender<any>).out === this)\n      return true; else\n    if ((x as any as OutSender<any>).out && (x as any as OutSender<any>).out !== NO)\n      return this._hasNoSinks((x as any as OutSender<any>).out, trace.concat(x)); else\n    if ((x as Stream<any>)._ils) {\n      for (let i = 0, N = (x as Stream<any>)._ils.length; i < N; i++)\n        if (!this._hasNoSinks((x as Stream<any>)._ils[i], trace.concat(x)))\n          return false;\n      return true;\n    } else return false;\n  }\n\n  private ctor(): typeof Stream {\n    return this instanceof MemoryStream ? MemoryStream : Stream;\n  }\n\n  /**\n   * Adds a Listener to the Stream.\n   *\n   * @param {Listener} listener\n   */\n  addListener(listener: Partial<Listener<T>>): void {\n    (listener as InternalListener<T>)._n = listener.next || noop;\n    (listener as InternalListener<T>)._e = listener.error || noop;\n    (listener as InternalListener<T>)._c = listener.complete || noop;\n    this._add(listener as InternalListener<T>);\n  }\n\n  /**\n   * Removes a Listener from the Stream, assuming the Listener was added to it.\n   *\n   * @param {Listener<T>} listener\n   */\n  removeListener(listener: Partial<Listener<T>>): void {\n    this._remove(listener as InternalListener<T>);\n  }\n\n  /**\n   * Adds a Listener to the Stream returning a Subscription to remove that\n   * listener.\n   *\n   * @param {Listener} listener\n   * @returns {Subscription}\n   */\n  subscribe(listener: Partial<Listener<T>>): Subscription {\n    this.addListener(listener);\n    return new StreamSub<T>(this, listener as InternalListener<T>);\n  }\n\n  /**\n   * Add interop between most.js and RxJS 5\n   *\n   * @returns {Stream}\n   */\n  [$$observable](): Stream<T> {\n    return this;\n  }\n\n  /**\n   * Creates a new Stream given a Producer.\n   *\n   * @factory true\n   * @param {Producer} producer An optional Producer that dictates how to\n   * start, generate events, and stop the Stream.\n   * @return {Stream}\n   */\n  static create<T>(producer?: Producer<T>): Stream<T> {\n    if (producer) {\n      if (typeof producer.start !== 'function'\n      || typeof producer.stop !== 'function')\n        throw new Error('producer requires both start and stop functions');\n      internalizeProducer(producer); // mutates the input\n    }\n    return new Stream(producer as InternalProducer<T> & Producer<T>);\n  }\n\n  /**\n   * Creates a new MemoryStream given a Producer.\n   *\n   * @factory true\n   * @param {Producer} producer An optional Producer that dictates how to\n   * start, generate events, and stop the Stream.\n   * @return {MemoryStream}\n   */\n  static createWithMemory<T>(producer?: Producer<T>): MemoryStream<T> {\n    if (producer) internalizeProducer(producer); // mutates the input\n    return new MemoryStream<T>(producer as InternalProducer<T> & Producer<T>);\n  }\n\n  /**\n   * Creates a Stream that does nothing when started. It never emits any event.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   *          never\n   * -----------------------\n   * ```\n   *\n   * @factory true\n   * @return {Stream}\n   */\n  static never(): Stream<any> {\n    return new Stream<any>({_start: noop, _stop: noop});\n  }\n\n  /**\n   * Creates a Stream that immediately emits the \"complete\" notification when\n   * started, and that's it.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * empty\n   * -|\n   * ```\n   *\n   * @factory true\n   * @return {Stream}\n   */\n  static empty(): Stream<any> {\n    return new Stream<any>({\n      _start(il: InternalListener<any>) { il._c(); },\n      _stop: noop,\n    });\n  }\n\n  /**\n   * Creates a Stream that immediately emits an \"error\" notification with the\n   * value you passed as the `error` argument when the stream starts, and that's\n   * it.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * throw(X)\n   * -X\n   * ```\n   *\n   * @factory true\n   * @param error The error event to emit on the created stream.\n   * @return {Stream}\n   */\n  static throw(error: any): Stream<any> {\n    return new Stream<any>({\n      _start(il: InternalListener<any>) { il._e(error); },\n      _stop: noop,\n    });\n  }\n\n  /**\n   * Creates a stream from an Array, Promise, or an Observable.\n   *\n   * @factory true\n   * @param {Array|PromiseLike|Observable} input The input to make a stream from.\n   * @return {Stream}\n   */\n  static from<T>(input: PromiseLike<T> | Stream<T> | Array<T> | Observable<T>): Stream<T> {\n    if (typeof input[$$observable] === 'function')\n      return Stream.fromObservable<T>(input as Observable<T>); else\n    if (typeof (input as PromiseLike<T>).then === 'function')\n      return Stream.fromPromise<T>(input as PromiseLike<T>); else\n    if (Array.isArray(input))\n      return Stream.fromArray<T>(input);\n\n    throw new TypeError(`Type of input to from() must be an Array, Promise, or Observable`);\n  }\n\n  /**\n   * Creates a Stream that immediately emits the arguments that you give to\n   * *of*, then completes.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * of(1,2,3)\n   * 123|\n   * ```\n   *\n   * @factory true\n   * @param a The first value you want to emit as an event on the stream.\n   * @param b The second value you want to emit as an event on the stream. One\n   * or more of these values may be given as arguments.\n   * @return {Stream}\n   */\n  static of<T>(...items: Array<T>): Stream<T> {\n    return Stream.fromArray<T>(items);\n  }\n\n  /**\n   * Converts an array to a stream. The returned stream will emit synchronously\n   * all the items in the array, and then complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * fromArray([1,2,3])\n   * 123|\n   * ```\n   *\n   * @factory true\n   * @param {Array} array The array to be converted as a stream.\n   * @return {Stream}\n   */\n  static fromArray<T>(array: Array<T>): Stream<T> {\n    return new Stream<T>(new FromArray<T>(array));\n  }\n\n  /**\n   * Converts a promise to a stream. The returned stream will emit the resolved\n   * value of the promise, and then complete. However, if the promise is\n   * rejected, the stream will emit the corresponding error.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * fromPromise( ----42 )\n   * -----------------42|\n   * ```\n   *\n   * @factory true\n   * @param {PromiseLike} promise The promise to be converted as a stream.\n   * @return {Stream}\n   */\n  static fromPromise<T>(promise: PromiseLike<T>): Stream<T> {\n    return new Stream<T>(new FromPromise<T>(promise));\n  }\n\n  /**\n   * Converts an Observable into a Stream.\n   *\n   * @factory true\n   * @param {any} observable The observable to be converted as a stream.\n   * @return {Stream}\n   */\n  static fromObservable<T>(obs: {subscribe: any}): Stream<T> {\n    if ((obs as Stream<T>).endWhen) return obs as Stream<T>;\n    const o = typeof obs[$$observable] === 'function' ? obs[$$observable]() : obs;\n    return new Stream<T>(new FromObservable(o));\n  }\n\n  /**\n   * Creates a stream that periodically emits incremental numbers, every\n   * `period` milliseconds.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   *     periodic(1000)\n   * ---0---1---2---3---4---...\n   * ```\n   *\n   * @factory true\n   * @param {number} period The interval in milliseconds to use as a rate of\n   * emission.\n   * @return {Stream}\n   */\n  static periodic(period: number): Stream<number> {\n    return new Stream<number>(new Periodic(period));\n  }\n\n  /**\n   * Blends multiple streams together, emitting events from all of them\n   * concurrently.\n   *\n   * *merge* takes multiple streams as arguments, and creates a stream that\n   * behaves like each of the argument streams, in parallel.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3--------4---\n   * ----a-----b----c---d------\n   *            merge\n   * --1-a--2--b--3-c---d--4---\n   * ```\n   *\n   * @factory true\n   * @param {Stream} stream1 A stream to merge together with other streams.\n   * @param {Stream} stream2 A stream to merge together with other streams. Two\n   * or more streams may be given as arguments.\n   * @return {Stream}\n   */\n  static merge: MergeSignature = function merge(...streams: Array<Stream<any>>) {\n    return new Stream<any>(new Merge(streams));\n  } as MergeSignature;\n\n  /**\n   * Combines multiple input streams together to return a stream whose events\n   * are arrays that collect the latest events from each input stream.\n   *\n   * *combine* internally remembers the most recent event from each of the input\n   * streams. When any of the input streams emits an event, that event together\n   * with all the other saved events are combined into an array. That array will\n   * be emitted on the output stream. It's essentially a way of joining together\n   * the events from multiple streams.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3--------4---\n   * ----a-----b-----c--d------\n   *          combine\n   * ----1a-2a-2b-3b-3c-3d-4d--\n   * ```\n   *\n   * @factory true\n   * @param {Stream} stream1 A stream to combine together with other streams.\n   * @param {Stream} stream2 A stream to combine together with other streams.\n   * Multiple streams, not just two, may be given as arguments.\n   * @return {Stream}\n   */\n  static combine: CombineSignature = function combine(...streams: Array<Stream<any>>) {\n    return new Stream<Array<any>>(new Combine<any>(streams));\n  } as CombineSignature;\n\n  protected _map<U>(project: (t: T) => U): Stream<U> | MemoryStream<U> {\n    return new (this.ctor())<U>(new MapOp<T, U>(project, this));\n  }\n\n  /**\n   * Transforms each event from the input Stream through a `project` function,\n   * to get a Stream that emits those transformed events.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---3--5-----7------\n   *    map(i => i * 10)\n   * --10--30-50----70-----\n   * ```\n   *\n   * @param {Function} project A function of type `(t: T) => U` that takes event\n   * `t` of type `T` from the input Stream and produces an event of type `U`, to\n   * be emitted on the output Stream.\n   * @return {Stream}\n   */\n  map<U>(project: (t: T) => U): Stream<U> {\n    return this._map(project);\n  }\n\n  /**\n   * It's like `map`, but transforms each input event to always the same\n   * constant value on the output Stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---3--5-----7-----\n   *       mapTo(10)\n   * --10--10-10----10----\n   * ```\n   *\n   * @param projectedValue A value to emit on the output Stream whenever the\n   * input Stream emits any value.\n   * @return {Stream}\n   */\n  mapTo<U>(projectedValue: U): Stream<U> {\n    const s = this.map(() => projectedValue);\n    const op: Operator<T, U> = s._prod as Operator<T, U>;\n    op.type = 'mapTo';\n    return s;\n  }\n\n  filter<S extends T>(passes: (t: T) => t is S): Stream<S>;\n  filter(passes: (t: T) => boolean): Stream<T>;\n  /**\n   * Only allows events that pass the test given by the `passes` argument.\n   *\n   * Each event from the input stream is given to the `passes` function. If the\n   * function returns `true`, the event is forwarded to the output stream,\n   * otherwise it is ignored and not forwarded.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---2--3-----4-----5---6--7-8--\n   *     filter(i => i % 2 === 0)\n   * ------2--------4---------6----8--\n   * ```\n   *\n   * @param {Function} passes A function of type `(t: T) => boolean` that takes\n   * an event from the input stream and checks if it passes, by returning a\n   * boolean.\n   * @return {Stream}\n   */\n  filter(passes: (t: T) => boolean): Stream<T> {\n    const p = this._prod;\n    if (p instanceof Filter)\n      return new Stream<T>(new Filter<T>(\n        and((p as Filter<T>).f, passes),\n        (p as Filter<T>).ins\n      ));\n    return new Stream<T>(new Filter<T>(passes, this));\n  }\n\n  /**\n   * Lets the first `amount` many events from the input stream pass to the\n   * output stream, then makes the output stream complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c----d---e--\n   *    take(3)\n   * --a---b--c|\n   * ```\n   *\n   * @param {number} amount How many events to allow from the input stream\n   * before completing the output stream.\n   * @return {Stream}\n   */\n  take(amount: number): Stream<T> {\n    return new (this.ctor())<T>(new Take<T>(amount, this));\n  }\n\n  /**\n   * Ignores the first `amount` many events from the input stream, and then\n   * after that starts forwarding events from the input stream to the output\n   * stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c----d---e--\n   *       drop(3)\n   * --------------d---e--\n   * ```\n   *\n   * @param {number} amount How many events to ignore from the input stream\n   * before forwarding all events from the input stream to the output stream.\n   * @return {Stream}\n   */\n  drop(amount: number): Stream<T> {\n    return new Stream<T>(new Drop<T>(amount, this));\n  }\n\n  /**\n   * When the input stream completes, the output stream will emit the last event\n   * emitted by the input stream, and then will also complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c--d----|\n   *       last()\n   * -----------------d|\n   * ```\n   *\n   * @return {Stream}\n   */\n  last(): Stream<T> {\n    return new Stream<T>(new Last<T>(this));\n  }\n\n  /**\n   * Prepends the given `initial` value to the sequence of events emitted by the\n   * input stream. The returned stream is a MemoryStream, which means it is\n   * already `remember()`'d.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ---1---2-----3---\n   *   startWith(0)\n   * 0--1---2-----3---\n   * ```\n   *\n   * @param initial The value or event to prepend.\n   * @return {MemoryStream}\n   */\n  startWith(initial: T): MemoryStream<T> {\n    return new MemoryStream<T>(new StartWith<T>(this, initial));\n  }\n\n  /**\n   * Uses another stream to determine when to complete the current stream.\n   *\n   * When the given `other` stream emits an event or completes, the output\n   * stream will complete. Before that happens, the output stream will behaves\n   * like the input stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ---1---2-----3--4----5----6---\n   *   endWhen( --------a--b--| )\n   * ---1---2-----3--4--|\n   * ```\n   *\n   * @param other Some other stream that is used to know when should the output\n   * stream of this operator complete.\n   * @return {Stream}\n   */\n  endWhen(other: Stream<any>): Stream<T> {\n    return new (this.ctor())<T>(new EndWhen<T>(other, this));\n  }\n\n  /**\n   * \"Folds\" the stream onto itself.\n   *\n   * Combines events from the past throughout\n   * the entire execution of the input stream, allowing you to accumulate them\n   * together. It's essentially like `Array.prototype.reduce`. The returned\n   * stream is a MemoryStream, which means it is already `remember()`'d.\n   *\n   * The output stream starts by emitting the `seed` which you give as argument.\n   * Then, when an event happens on the input stream, it is combined with that\n   * seed value through the `accumulate` function, and the output value is\n   * emitted on the output stream. `fold` remembers that output value as `acc`\n   * (\"accumulator\"), and then when a new input event `t` happens, `acc` will be\n   * combined with that to produce the new `acc` and so forth.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ------1-----1--2----1----1------\n   *   fold((acc, x) => acc + x, 3)\n   * 3-----4-----5--7----8----9------\n   * ```\n   *\n   * @param {Function} accumulate A function of type `(acc: R, t: T) => R` that\n   * takes the previous accumulated value `acc` and the incoming event from the\n   * input stream and produces the new accumulated value.\n   * @param seed The initial accumulated value, of type `R`.\n   * @return {MemoryStream}\n   */\n  fold<R>(accumulate: (acc: R, t: T) => R, seed: R): MemoryStream<R> {\n    return new MemoryStream<R>(new Fold<T, R>(accumulate, seed, this));\n  }\n\n  /**\n   * Replaces an error with another stream.\n   *\n   * When (and if) an error happens on the input stream, instead of forwarding\n   * that error to the output stream, *replaceError* will call the `replace`\n   * function which returns the stream that the output stream will replicate.\n   * And, in case that new stream also emits an error, `replace` will be called\n   * again to get another stream to start replicating.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---2-----3--4-----X\n   *   replaceError( () => --10--| )\n   * --1---2-----3--4--------10--|\n   * ```\n   *\n   * @param {Function} replace A function of type `(err) => Stream` that takes\n   * the error that occurred on the input stream or on the previous replacement\n   * stream and returns a new stream. The output stream will behave like the\n   * stream that this function returns.\n   * @return {Stream}\n   */\n  replaceError(replace: (err: any) => Stream<T>): Stream<T> {\n    return new (this.ctor())<T>(new ReplaceError<T>(replace, this));\n  }\n\n  /**\n   * Flattens a \"stream of streams\", handling only one nested stream at a time\n   * (no concurrency).\n   *\n   * If the input stream is a stream that emits streams, then this operator will\n   * return an output stream which is a flat stream: emits regular events. The\n   * flattening happens without concurrency. It works like this: when the input\n   * stream emits a nested stream, *flatten* will start imitating that nested\n   * one. However, as soon as the next nested stream is emitted on the input\n   * stream, *flatten* will forget the previous nested one it was imitating, and\n   * will start imitating the new nested one.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --+--------+---------------\n   *   \\        \\\n   *    \\       ----1----2---3--\n   *    --a--b----c----d--------\n   *           flatten\n   * -----a--b------1----2---3--\n   * ```\n   *\n   * @return {Stream}\n   */\n  flatten<R>(this: Stream<Stream<R>>): T {\n    const p = this._prod;\n    return new Stream<R>(new Flatten(this)) as T & Stream<R>;\n  }\n\n  /**\n   * Passes the input stream to a custom operator, to produce an output stream.\n   *\n   * *compose* is a handy way of using an existing function in a chained style.\n   * Instead of writing `outStream = f(inStream)` you can write\n   * `outStream = inStream.compose(f)`.\n   *\n   * @param {function} operator A function that takes a stream as input and\n   * returns a stream as well.\n   * @return {Stream}\n   */\n  compose<U>(operator: (stream: Stream<T>) => U): U {\n    return operator(this);\n  }\n\n  /**\n   * Returns an output stream that behaves like the input stream, but also\n   * remembers the most recent event that happens on the input stream, so that a\n   * newly added listener will immediately receive that memorised event.\n   *\n   * @return {MemoryStream}\n   */\n  remember(): MemoryStream<T> {\n    return new MemoryStream<T>(new Remember<T>(this));\n  }\n\n  debug(): Stream<T>;\n  debug(labelOrSpy: string): Stream<T>;\n  debug(labelOrSpy: (t: T) => any): Stream<T>;\n  /**\n   * Returns an output stream that identically behaves like the input stream,\n   * but also runs a `spy` function for each event, to help you debug your app.\n   *\n   * *debug* takes a `spy` function as argument, and runs that for each event\n   * happening on the input stream. If you don't provide the `spy` argument,\n   * then *debug* will just `console.log` each event. This helps you to\n   * understand the flow of events through some operator chain.\n   *\n   * Please note that if the output stream has no listeners, then it will not\n   * start, which means `spy` will never run because no actual event happens in\n   * that case.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3-----4--\n   *         debug\n   * --1----2-----3-----4--\n   * ```\n   *\n   * @param {function} labelOrSpy A string to use as the label when printing\n   * debug information on the console, or a 'spy' function that takes an event\n   * as argument, and does not need to return anything.\n   * @return {Stream}\n   */\n  debug(labelOrSpy?: string | ((t: T) => any)): Stream<T> {\n    return new (this.ctor())<T>(new Debug<T>(this, labelOrSpy));\n  }\n\n  /**\n   * *imitate* changes this current Stream to emit the same events that the\n   * `other` given Stream does. This method returns nothing.\n   *\n   * This method exists to allow one thing: **circular dependency of streams**.\n   * For instance, let's imagine that for some reason you need to create a\n   * circular dependency where stream `first$` depends on stream `second$`\n   * which in turn depends on `first$`:\n   *\n   * <!-- skip-example -->\n   * ```js\n   * import delay from 'xstream/extra/delay'\n   *\n   * var first$ = second$.map(x => x * 10).take(3);\n   * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));\n   * ```\n   *\n   * However, that is invalid JavaScript, because `second$` is undefined\n   * on the first line. This is how *imitate* can help solve it:\n   *\n   * ```js\n   * import delay from 'xstream/extra/delay'\n   *\n   * var secondProxy$ = xs.create();\n   * var first$ = secondProxy$.map(x => x * 10).take(3);\n   * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));\n   * secondProxy$.imitate(second$);\n   * ```\n   *\n   * We create `secondProxy$` before the others, so it can be used in the\n   * declaration of `first$`. Then, after both `first$` and `second$` are\n   * defined, we hook `secondProxy$` with `second$` with `imitate()` to tell\n   * that they are \"the same\". `imitate` will not trigger the start of any\n   * stream, it just binds `secondProxy$` and `second$` together.\n   *\n   * The following is an example where `imitate()` is important in Cycle.js\n   * applications. A parent component contains some child components. A child\n   * has an action stream which is given to the parent to define its state:\n   *\n   * <!-- skip-example -->\n   * ```js\n   * const childActionProxy$ = xs.create();\n   * const parent = Parent({...sources, childAction$: childActionProxy$});\n   * const childAction$ = parent.state$.map(s => s.child.action$).flatten();\n   * childActionProxy$.imitate(childAction$);\n   * ```\n   *\n   * Note, though, that **`imitate()` does not support MemoryStreams**. If we\n   * would attempt to imitate a MemoryStream in a circular dependency, we would\n   * either get a race condition (where the symptom would be \"nothing happens\")\n   * or an infinite cyclic emission of values. It's useful to think about\n   * MemoryStreams as cells in a spreadsheet. It doesn't make any sense to\n   * define a spreadsheet cell `A1` with a formula that depends on `B1` and\n   * cell `B1` defined with a formula that depends on `A1`.\n   *\n   * If you find yourself wanting to use `imitate()` with a\n   * MemoryStream, you should rework your code around `imitate()` to use a\n   * Stream instead. Look for the stream in the circular dependency that\n   * represents an event stream, and that would be a candidate for creating a\n   * proxy Stream which then imitates the target Stream.\n   *\n   * @param {Stream} target The other stream to imitate on the current one. Must\n   * not be a MemoryStream.\n   */\n  imitate(target: Stream<T>): void {\n    if (target instanceof MemoryStream)\n      throw new Error('A MemoryStream was given to imitate(), but it only ' +\n      'supports a Stream. Read more about this restriction here: ' +\n      'https://github.com/staltz/xstream#faq');\n    this._target = target;\n    for (let ils = this._ils, N = ils.length, i = 0; i < N; i++) target._add(ils[i]);\n    this._ils = [];\n  }\n\n  /**\n   * Forces the Stream to emit the given value to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   *\n   * @param value The \"next\" value you want to broadcast to all listeners of\n   * this Stream.\n   */\n  shamefullySendNext(value: T) {\n    this._n(value);\n  }\n\n  /**\n   * Forces the Stream to emit the given error to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   *\n   * @param {any} error The error you want to broadcast to all the listeners of\n   * this Stream.\n   */\n  shamefullySendError(error: any) {\n    this._e(error);\n  }\n\n  /**\n   * Forces the Stream to emit the \"completed\" event to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   */\n  shamefullySendComplete() {\n    this._c();\n  }\n\n  /**\n   * Adds a \"debug\" listener to the stream. There can only be one debug\n   * listener, that's why this is 'setDebugListener'. To remove the debug\n   * listener, just call setDebugListener(null).\n   *\n   * A debug listener is like any other listener. The only difference is that a\n   * debug listener is \"stealthy\": its presence/absence does not trigger the\n   * start/stop of the stream (or the producer inside the stream). This is\n   * useful so you can inspect what is going on without changing the behavior\n   * of the program. If you have an idle stream and you add a normal listener to\n   * it, the stream will start executing. But if you set a debug listener on an\n   * idle stream, it won't start executing (not until the first normal listener\n   * is added).\n   *\n   * As the name indicates, we don't recommend using this method to build app\n   * logic. In fact, in most cases the debug operator works just fine. Only use\n   * this one if you know what you're doing.\n   *\n   * @param {Listener<T>} listener\n   */\n  setDebugListener(listener: Partial<Listener<T>> | null | undefined) {\n    if (!listener) {\n      this._d = false;\n      this._dl = NO as InternalListener<T>;\n    } else {\n      this._d = true;\n      (listener as InternalListener<T>)._n = listener.next || noop;\n      (listener as InternalListener<T>)._e = listener.error || noop;\n      (listener as InternalListener<T>)._c = listener.complete || noop;\n      this._dl = listener as InternalListener<T>;\n    }\n  }\n}\n\nexport class MemoryStream<T> extends Stream<T> {\n  private _v: T;\n  private _has: boolean = false;\n  constructor(producer: InternalProducer<T>) {\n    super(producer);\n  }\n\n  _n(x: T) {\n    this._v = x;\n    this._has = true;\n    super._n(x);\n  }\n\n  _add(il: InternalListener<T>): void {\n    const ta = this._target;\n    if (ta !== NO) return ta._add(il);\n    const a = this._ils;\n    a.push(il);\n    if (a.length > 1) {\n      if (this._has) il._n(this._v);\n      return;\n    }\n    if (this._stopID !== NO) {\n      if (this._has) il._n(this._v);\n      clearTimeout(this._stopID);\n      this._stopID = NO;\n    } else if (this._has) il._n(this._v); else {\n      const p = this._prod;\n      if (p !== NO) p._start(this);\n    }\n  }\n\n  _stopNow() {\n    this._has = false;\n    super._stopNow();\n  }\n\n  _x(): void {\n    this._has = false;\n    super._x();\n  }\n\n  map<U>(project: (t: T) => U): MemoryStream<U> {\n    return this._map(project) as MemoryStream<U>;\n  }\n\n  mapTo<U>(projectedValue: U): MemoryStream<U> {\n    return super.mapTo(projectedValue) as MemoryStream<U>;\n  }\n\n  take(amount: number): MemoryStream<T> {\n    return super.take(amount) as MemoryStream<T>;\n  }\n\n  endWhen(other: Stream<any>): MemoryStream<T> {\n    return super.endWhen(other) as MemoryStream<T>;\n  }\n\n  replaceError(replace: (err: any) => Stream<T>): MemoryStream<T> {\n    return super.replaceError(replace) as MemoryStream<T>;\n  }\n\n  remember(): MemoryStream<T> {\n    return this;\n  }\n\n  debug(): MemoryStream<T>;\n  debug(labelOrSpy: string): MemoryStream<T>;\n  debug(labelOrSpy: (t: T) => any): MemoryStream<T>;\n  debug(labelOrSpy?: string | ((t: T) => any) | undefined): MemoryStream<T> {\n    return super.debug(labelOrSpy as any) as MemoryStream<T>;\n  }\n}\n\nexport {NO, NO_IL};\nconst xs = Stream;\ntype xs<T> = Stream<T>;\nexport default xs;\n","import {Operator, Stream} from '../index';\nconst empty = {};\n\nexport class DropRepeatsOperator<T> implements Operator<T, T> {\n  public type = 'dropRepeats';\n  public out: Stream<T> = null as any;\n  public isEq: (x: T, y: T) => boolean;\n  private v: T = <any> empty;\n\n  constructor(public ins: Stream<T>,\n              fn: ((x: T, y: T) => boolean) | undefined) {\n    this.isEq = fn ? fn : (x, y) => x === y;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = null as any;\n    this.v = empty as any;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (!u) return;\n    const v = this.v;\n    if (v !== empty && this.isEq(t, v)) return;\n    this.v = t;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (!u) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (!u) return;\n    u._c();\n  }\n}\n\n/**\n * Drops consecutive duplicate values in a stream.\n *\n * Marble diagram:\n *\n * ```text\n * --1--2--1--1--1--2--3--4--3--3|\n *     dropRepeats\n * --1--2--1--------2--3--4--3---|\n * ```\n *\n * Example:\n *\n * ```js\n * import dropRepeats from 'xstream/extra/dropRepeats'\n *\n * const stream = xs.of(1, 2, 1, 1, 1, 2, 3, 4, 3, 3)\n *   .compose(dropRepeats())\n *\n * stream.addListener({\n *   next: i => console.log(i),\n *   error: err => console.error(err),\n *   complete: () => console.log('completed')\n * })\n * ```\n *\n * ```text\n * > 1\n * > 2\n * > 1\n * > 2\n * > 3\n * > 4\n * > 3\n * > completed\n * ```\n *\n * Example with a custom isEqual function:\n *\n * ```js\n * import dropRepeats from 'xstream/extra/dropRepeats'\n *\n * const stream = xs.of('a', 'b', 'a', 'A', 'B', 'b')\n *   .compose(dropRepeats((x, y) => x.toLowerCase() === y.toLowerCase()))\n *\n * stream.addListener({\n *   next: i => console.log(i),\n *   error: err => console.error(err),\n *   complete: () => console.log('completed')\n * })\n * ```\n *\n * ```text\n * > a\n * > b\n * > a\n * > B\n * > completed\n * ```\n *\n * @param {Function} isEqual An optional function of type\n * `(x: T, y: T) => boolean` that takes an event from the input stream and\n * checks if it is equal to previous event, by returning a boolean.\n * @return {Stream}\n */\nexport default function dropRepeats<T>(isEqual: ((x: T, y: T) => boolean) | undefined = void 0): (ins: Stream<T>) => Stream<T> {\n  return function dropRepeatsOperator(ins: Stream<T>): Stream<T> {\n    return new Stream<T>(new DropRepeatsOperator<T>(ins, isEqual));\n  };\n}\n","export interface ICircularBuffer {\n  write(data: Float32Array): void;\n\n  readLast(length: number): Float32Array;\n}\n\nexport class CircularBuffer implements ICircularBuffer {\n  private readonly buffer: Float32Array;\n  private offset: number = 0;\n\n  constructor(size: number) {\n    this.buffer = new Float32Array(size);\n    this.offset = 0;\n  }\n\n  write(data: Float32Array) {\n    if (this.offset + data.length > this.buffer.length) {\n      this.buffer.set(\n        data.subarray(0, this.buffer.length - this.offset),\n        this.offset\n      );\n      this.buffer.set(data.subarray(this.buffer.length - this.offset));\n      this.offset = this.buffer.length - this.offset;\n    } else {\n      this.buffer.set(data, this.offset);\n      this.offset += data.length;\n    }\n  }\n\n  readLast(length: number): Float32Array {\n    length = Math.min(this.buffer.length, length);\n\n    if (length <= this.offset) {\n      return this.buffer.slice(this.offset - length, this.offset);\n    }\n\n    const output = new Float32Array(length);\n\n    output.set(\n      this.buffer.subarray(this.buffer.length - (length - this.offset))\n    );\n    output.set(this.buffer.subarray(0, this.offset), length - this.offset);\n\n    return output;\n  }\n}\n\nexport default CircularBuffer;\n","/**\n * Utility function to filter actions by key with type narrowing\n */\nexport const ofType =\n  <T extends { key: string }, K extends string>(key: K) =>\n  (action: T): action is Extract<T, { key: K }> => {\n    return action.key == key;\n  };\n\n/**\n * Another simple utility function which filters by the value\n */\nexport const is =\n  <T>(x: T) =>\n  (y: T) =>\n    x === y;\n\n/**\n * Check if a value is defined\n */\nexport const isDefined = <T>(x: T): x is Exclude<T, undefined> =>\n  x !== undefined;\n","export interface IAverageAmplitude {\n  getAverageAmplitude(): number;\n\n  write(data: Float32Array): void;\n}\n\nexport class AverageAmplitude implements IAverageAmplitude {\n  private readonly sampleCount: number;\n\n  private avg: number = 0;\n\n  constructor(sampleCount: number) {\n    this.sampleCount = sampleCount;\n  }\n\n  write(data: Float32Array) {\n    const sum = data.map(Math.abs).reduce((a, b) => a + b);\n\n    this.avg *= 1 - data.length / this.sampleCount;\n    this.avg += sum / this.sampleCount;\n  }\n\n  getAverageAmplitude() {\n    return this.avg;\n  }\n}\n","import xs, { Stream } from \"xstream\";\nimport dropRepeats from \"xstream/extra/dropRepeats\";\nimport CircularBuffer from \"./CircularBuffer\";\nimport VoiceDetector from \"./VoiceDetector\";\nimport { ofType, is, isDefined } from \"../utils\";\nimport { AverageAmplitude } from \"./AverageAmplitude\";\n\n/**\n * Size of the buffer allocated for storage of the recorded speech\n *\n * 2646000 is enough to fit 1 minute of audio at 44100 sample rate.\n */\nexport const BUFFER_SIZE = 2646000;\n\n/**\n * Values necessary for the worker to function\n */\nexport interface Settings {\n  /**\n   * Sample rate of the recorded stream as the number of samples per second\n   */\n  sampleRate: number;\n\n  /**\n   * Duration in seconds for which the average amplitude is being collected\n   */\n  silenceDuration: number;\n\n  /**\n   * Amplitude threshold which separates speech from silence specified\n   * as a floating point number number between 0 and 1\n   */\n  amplitudeThreshold: number;\n\n  /**\n   * Duration of the audio caputred before the beginning of speech\n   */\n  contextDuration: number;\n}\n\n/**\n * Input messages sent to the worker\n */\ntype Action =\n  | {\n      key: \"start\";\n      data: Settings;\n    }\n  | {\n      key: \"process\";\n      data: Float32Array;\n    }\n  | {\n      key: \"update_settings\";\n      data: Partial<Settings>;\n    }\n  | {\n      key: \"stop\";\n    };\n\n/**\n * Outgoing messages dispatched by the worker\n */\ntype Event =\n  | {\n      key: \"average_amplitude\";\n      data: number;\n    }\n  | {\n      key: \"voice_start\";\n    }\n  | {\n      key: \"voice_end\";\n      data: Float32Array;\n    };\n\n/**\n * Create a stream which emits average sound amplitude\n */\nconst createAverageAmplitudeStream = (\n  action$: Stream<Action>,\n  sampleRate: number,\n  silenceDuration: number\n): Stream<number> => {\n  const averageAmplitude = new AverageAmplitude(silenceDuration * sampleRate);\n\n  action$.filter(ofType(\"process\")).subscribe({\n    next: (action) => averageAmplitude.write(action.data),\n  });\n\n  return action$\n    .filter(ofType(\"process\"))\n    .map(() => averageAmplitude.getAverageAmplitude());\n};\n\n/**\n * Create a stream which emits a boolean indicating whether the amplitude exceeds threshold\n */\nconst createVoiceDetectorStream = (\n  action$: Stream<Action>,\n  averageAmplitude$: Stream<number>,\n  amplitudeThreshold: number\n): Stream<boolean> => {\n  return action$\n    .filter(ofType(\"update_settings\"))\n    .map((action) => action.data.amplitudeThreshold)\n    .filter(isDefined)\n    .debug()\n    .startWith(amplitudeThreshold)\n    .map((amplitudeThreshold) => {\n      return averageAmplitude$\n        .map((amplitude) => amplitude > amplitudeThreshold)\n        .compose(dropRepeats());\n    })\n    .flatten();\n};\n\n/**\n * Create a stream which\n */\nconst createSpeechCaptureStream = (\n  action$: Stream<Action>,\n  sampleRate: number,\n  contextDuration: number,\n  isHearingVoice$: Stream<boolean>\n): Stream<Float32Array> => {\n  const buffer = new CircularBuffer(BUFFER_SIZE);\n\n  action$.filter(ofType(\"process\")).subscribe({\n    next: (action) => buffer.write(action.data),\n  });\n\n  return isHearingVoice$\n    .filter(is(true))\n    .map(() => {\n      let recordingLength = contextDuration * sampleRate;\n\n      action$.filter(ofType(\"process\")).subscribe({\n        next: (action) => {\n          recordingLength += action.data.length;\n        },\n      });\n\n      return isHearingVoice$\n        .filter(is(false))\n        .map(() => buffer.readLast(recordingLength))\n        .take(1);\n    })\n    .flatten();\n};\n\n/**\n * This function handles outside commands, analyzing the audio and\n * producing a stream of events to drive the UI..\n */\nconst createStreamProcessor = (action$: Stream<Action>): Stream<Event> => {\n  return action$\n    .filter(ofType(\"start\"))\n    .map((action) => {\n      const {\n        sampleRate,\n        silenceDuration,\n        amplitudeThreshold,\n        contextDuration,\n      } = action.data;\n      const averageAmplitude$ = createAverageAmplitudeStream(\n        action$,\n        sampleRate,\n        silenceDuration\n      );\n      const isHearingVoice$ = createVoiceDetectorStream(\n        action$,\n        averageAmplitude$,\n        amplitudeThreshold\n      );\n      const capturedSentence$ = createSpeechCaptureStream(\n        action$,\n        sampleRate,\n        contextDuration,\n        isHearingVoice$\n      );\n\n      return xs\n        .merge(\n          averageAmplitude$.map<Event>((data) => ({\n            key: \"average_amplitude\",\n            data,\n          })),\n          isHearingVoice$.filter(is(true)).mapTo<Event>({ key: \"voice_start\" }),\n          capturedSentence$.map<Event>((data) => ({ key: \"voice_end\", data }))\n        )\n        .endWhen(action$.filter(ofType(\"stop\")));\n    })\n    .flatten();\n};\n\nconst ctx: Worker = self as any;\n\nconst action$ = xs.create<Action>({\n  start: (listener) => {\n    ctx.onmessage = (e) => listener.next(e.data);\n  },\n  stop: () => {\n    ctx.onmessage = null;\n  },\n});\n\ncreateStreamProcessor(action$).subscribe({\n  next: ctx.postMessage.bind(ctx),\n  error: console.error,\n});\n\nexport type InputWorkerEvent = Action;\nexport type OutputWorkerEvent = Event;\n"]}
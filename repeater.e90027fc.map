{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAM,SAAS,IAAI,MAAJ,CAAW,sCAAX,CAAf;AAEA,IAAI,WAAW,IAAI,YAAJ,EAAf;AAEA,IAAI,eAA6C,IAAjD;AAEA,OAAO,SAAP,GAAmB,UAAA,CAAA,EAAC;AAClB,YAAQ,EAAE,IAAF,CAAO,IAAf;AACE,aAAK,aAAL;AAAoB;AAClB,oBAAI,iBAAiB,IAArB,EAA2B;AACzB,iCAAa,UAAb,CAAwB,SAAS,WAAjC;AACA,iCAAa,IAAb;AACD;AAED;AACD;AAED,aAAK,WAAL;AAAkB;AAChB,+BAAe,SAAS,kBAAT,EAAf;AAEA,oBAAM,SAAS,EAAE,IAAF,CAAO,OAAtB;AACA,oBAAM,cAAc,SAAS,YAAT,CAClB,CADkB,EAElB,OAAO,MAFW,EAGlB,SAAS,UAHS,CAApB;AAMA,4BAAY,aAAZ,CAA0B,MAA1B,EAAkC,CAAlC,EAAqC,CAArC;AAEA,6BAAa,MAAb,GAAsB,WAAtB;AACA,6BAAa,OAAb,CAAqB,SAAS,WAA9B;AACA,6BAAa,KAAb;AAEA;AACD;AA3BH;AA6BD,CA9BD;AAgCA,UAAU,YAAV,CACG,YADH,CACgB;AACZ,WAAO;AADK,CADhB,EAIG,IAJH,CAIQ,UAAC,MAAD,EAAoB;AACxB,QAAM,SAAS,SAAS,uBAAT,CAAiC,MAAjC,CAAf;AAEA,QAAM,kBAAkB,SAAS,qBAAT,CAA+B,IAA/B,EAAqC,CAArC,EAAwC,CAAxC,CAAxB;AAEA,oBAAgB,cAAhB,GAAiC,UAAC,CAAD,EAAwB;AAC/C,YAAA,cAAA,EAAA,WAAA;AACR,YAAM,OAAO,YAAY,cAAZ,CAA2B,CAA3B,CAAb;AAEA,eAAO,WAAP,CAAmB,IAAnB;AACD,KALD;AAOA,WAAO,OAAP,CAAe,eAAf;AAEA,QAAM,OAAO,SAAS,UAAT,EAAb;AACA,SAAK,IAAL,CAAU,KAAV,GAAkB,CAAlB;AAEA,oBAAgB,OAAhB,CAAwB,IAAxB;AAEA,SAAK,OAAL,CAAa,SAAS,WAAtB;AACD,CAxBH","file":"repeater.e90027fc.map","sourceRoot":"..","sourcesContent":["const worker = new Worker(\"./worker.ts\");\n\nvar audioCtx = new AudioContext();\n\nlet bufferSource: AudioBufferSourceNode | null = null;\n\nworker.onmessage = e => {\n  switch (e.data.type) {\n    case \"voice_start\": {\n      if (bufferSource !== null) {\n        bufferSource.disconnect(audioCtx.destination);\n        bufferSource.stop();\n      }\n\n      break;\n    }\n\n    case \"voice_end\": {\n      bufferSource = audioCtx.createBufferSource();\n\n      const buffer = e.data.payload;\n      const audioBuffer = audioCtx.createBuffer(\n        1,\n        buffer.length,\n        audioCtx.sampleRate\n      );\n\n      audioBuffer.copyToChannel(buffer, 0, 0);\n\n      bufferSource.buffer = audioBuffer;\n      bufferSource.connect(audioCtx.destination);\n      bufferSource.start();\n\n      break;\n    }\n  }\n};\n\nnavigator.mediaDevices\n  .getUserMedia({\n    audio: true\n  })\n  .then((stream: MediaStream) => {\n    const source = audioCtx.createMediaStreamSource(stream);\n\n    const scriptProcessor = audioCtx.createScriptProcessor(4096, 1, 1);\n\n    scriptProcessor.onaudioprocess = (e: AudioProcessingEvent) => {\n      const { inputBuffer } = e;\n      const data = inputBuffer.getChannelData(0);\n\n      worker.postMessage(data);\n    };\n\n    source.connect(scriptProcessor);\n\n    const mute = audioCtx.createGain();\n    mute.gain.value = 0;\n\n    scriptProcessor.connect(mute);\n\n    mute.connect(audioCtx.destination);\n  });\n"]}
{"version":3,"sources":["node_modules/symbol-observable/es/ponyfill.js","node_modules/symbol-observable/es/index.js","src/index.ts","../src/extra/dropRepeats.ts","src/worker/CircularBuffer.ts","src/worker/VoiceDetector.ts","src/utils.ts","src/worker/index.ts"],"names":["symbolObservablePonyfill","root","result","Symbol","observable","_ponyfill","_interopRequireDefault","require","obj","__esModule","default","self","window","global","module","Function","ponyfill","_default","exports"],"mappings":";;AGAA,kCAA0C;AAC1C,IAAM,KAAK,GAAG,EAAE,CAAC;AAEjB;IAME,6BAAmB,GAAc,EACrB,EAAyC;AHVxC,AMAf,AFMA,ACAA,AENA,IHMA,ACAA,AENA,IJSqB,CHTGA,GOAxB,GAAA,CJSwB,ECHxB,CDGqB,ECHrB,CDGwB,CAAW,KCHnC,CAAA,IJNgDA,AKMhD,CLNiDC,EKMjD,CENA,CPAqD,AOArD,EPAuD,GIMvD,ACAA,CAAA,CENA,CHMA,aAAA,YAAA,ECAA,GAAA,aAAA,YAAA;AJLA,AMAA,EPAC,AISC,ACEA,EJXFI,AMAA,EPAKH,EGGI,GCMP,ACEA,CLXS,CCAX,GAAAI,AMAA,CJGa,EIHb,CJGgB,KCMd,CAAY,IAAY,EAAA,CDNG,CAAC,IFH9B,CAAAC,CIWE,CAAY,AEXd,CAAA,INAA,GMAA,CFW+B,EAAE,WAAmB,EAAA;AJXf,AMCrC,EPAC,EIMS,ACEA,AERV,EPAKJ,EGGI,ACGC,ACEA,CJT2BG,AGO3B,ACEA,GLRC,AKQE,GLRCL,AIME,ACEQ,CFLZ,AEKa,EDFE,CDHD,AHHR,AIMU,AGN5B,CPAmBE,EOAnB,CJGqC,CAAC,EHHb,MCDYK,GAAA,SMCrC,CAAA,CNDqCA,GAAA,GMCrC,CNDqCA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AADrC,AKGO,ACAP,EPCC,EMDY,AFQT,ACEA,AEVJ,EPCK,EGGK,ACIF,ACEA,CDFC,ACEA,CCVU,GNCPL,AMDO,CHIR,CCII,EDJQ,CCIL,AGRlB,CPCkB,CMDC,ADUC,CCVD,ACAnB,CJI4B,ACIN,CDJO,AEMN,CLTA,GMDJ,GAAG,INCW,AIOC,ACEA,CDFC,CJPA,GMDtB,AFQ0B,CAAC,GGRxC,CAAA,CDAmB,CAAiD,GAAM,EAAA,ACA1E;AACA,EDD+E,ENE7E,AIOE,ACEA,AEVJ,IJOI,AHNEA,AIOE,ACEA,CCXuE,AFStE,ACEA,CEVT,EJOQ,CAAC,AIPT,CPCY,CAACC,AIOE,EDDF,CCCK,ACEA,CCVhB,AFQiB,CDDH,AIPhB,CFUqB,CFHH,CAAC,CAAC,CAAC,AHNE,AMDZ,EHOY,AHNE,AMDd,CHOa,CAAC,CAAC,AEGI,UFHH,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,KAAK,CAAC,EAAP,CAAO,CAAC;AFR5C,AMCsC,EHSpC,ACEA,EFHA,AFTEH,AKGF,CHMC,CHNAC,ECHK,CMC8B,EDE7B,CNAA,GAAGC,EMAG,CAAC,GNAE,AMAC,CNAAC,GMAI,GAAG,INAG,AOFS,GAAA,WAAA,GAAA,IAAA,GAAA,CAAA,UAAA,GAAA,GAAA,KAAA,OAAA,EAAA,GAAA;ANCtC,ACLA,AKMA,EDCA,AFQE,ACEA,CCVD,CHOC,AFTE,ADEF,CAAC,MCFQO,ADEF,ICFM,CGUb,CAAA,GHVkB,MGUlB,CAAA,IHV6B,AIY7B,CDFK,ACEL,CJZ+B,EGU/B,KDDM,CEGN,CAAA,CFHA,ECCM,ECED,EDFmB,CCExB,CDFwB,EDDjB,EDdoC,CCctB,IEGf,IAAkB,EAAA;AHf1B,AIC+E,CAI9E,CLDCV,ECJI,AEcF,ACEA,EJZE,ADEHC,AENK,ECaJ,ACCI,ACEE,CJZDS,ACJE,EAAE,AGgBA,CFHL,AHPC,AENK,AEcF,CDDH,AFTI,AGUA,CCEG,CLVJR,CGOA,EEGQ,CFHL,ACCI,ACEE,ELVH,CGOA,AHPC,AIQG,ACEE,CFHL,AEGM,GDFC,CAAC,ACEE,CAAC,GAAG,CAAC,CDFD,ACEE,CLVJ,CAAC,CIQI,GCEK,CDFD,ACEE,CDFD,MAAM,CAAC,ECEL,CAAC,EAAE,CDFQ,ACEP,EDFS,ACET;AJX/C,AC4/DQ,AI1/DR,CLFC,KDEEA,AIQG,ACC8C,CJX7C,CESH,ECCM,CHVC,AGUA,CDDH,AHPC,CGOA,AHPCC,AKS0C,CAAC,EFFzC,ADm/DF,CCn/DG,ACCI,ACCuC,CJXtCQ,AGUA,ACCuC,GFFxC,ACCI,CDDH,ACEV,CJTY,CCFI,EESF,AHPCV,AISX,CDFW,ACEV,CDFW,CFTK,GDEA,GISR,CAAC,CAAC,EAAE,CHXe,EAAE,CGWb,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,EAClD,IAAI,CAAC,MAAM,CACZ;AFjBP,EDKED,EESA,AHPA,AKQkD,CFDjD,AECsD,CJVnD,AGaA,ACHoD,GJVjDW,CGaC,CAAC,IHbI,EGaE,CFlBA,AEkBC,CFlBA,EEkBG,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;AHZtE,ACJA,CDIC,CDEA,CAAC,CGQA,AECE,EDEE,CHbC,CIWC,CLTA,AKSC,CDEC,CHbC,AGaA,CFjBI,AGeH,CHfc,GGeV,CDEC,ACFA,CJXCC,EGaE,ACFA,IJXI,AGaA,ACFA,CDEC,ACFA,IJXI,EGaE,ACFA,CDEC,ECFE,IDEI,ACFA,CFD/B,AECgC,CJXC,CGaC,CDHvC,AFVwC,GGaG,CAAC,ICFI,EDEE;AEV7C,ACDA,ENDLZ,EDEAC,AENA,AIMW,ADST,AEVS,CHYR,CHbC,AKES,EHQX,ADdI,AGeA,CJXCW,ACJA,AIMM,ADSN,CLTD,CIWG,CDHH,ADdI,AGeA,CFDH,AHRE,AENE,CAAC,CDIC,AMCS,CJSZ,AGRG,ADSC,CFDH,AGRE,CCDS,CDCT,ADSI,CHfC,CAAC,CIMH,ADSI,EFDF,CAAC,AITG,CFUE,AEVF,CPCC,AKSE,EFDF,CAAC,CAAC,AGRd,EAAE,CAAO,CAAI,EAAA,ACDF,CFUc,EEVX,OAAO;ANAlC,AM4DA,CN5DC,CDEA,AMD8B,ADU7B,CAAC,CHfD,EEiBI,CHbC,CEUH,ADdI,CAAC,AIKsB,CFYrB,CHbC,AGaA,CDHH,ADdI,CCcH,GAAG,CDdK,AEiBA,CHbCC,ACJA,AEiBA,CDHH,ADdI,AIKa,CJLZ,AIKgB,CJLf,AEiBA,CEZe,AFYd,CDHI,CAAC,AFVH,EGaE,EAAE,CHbC,GGaG,CAAC,MAAM,CHbC,AGaA,EHbE;EACxCb,ADGD,AKSC,EHhBA,AIIuC,ELAnC,AGaA,EDHF,CFVKa,ADGDZ,AEPD,CEiBG,CEb+B,AFa9B,CDHH,AGVkC,CHUjC,ADdE,CCcD,ADdE,CDIG,ADGD,EGOD,ADdE,AIIgC,AFa9B,CFjBD,AIIgC,EJJ9B,CAAC,AEiBE,CDHI,CAAC,CDdJ,CAAC,AEiBE,CAAC,CFjBD,EAAE,CAAC,CGgB1B,CDC8B,ACD9B,SAAA,CAAA,cAAc,GAAd,YAAA;AJXF,ADGA,CCHC,CKDwC,CAAO,CHW9C,AEEE,CFFD,EFVI,CCLuB,CAAC,CAAC,CAAC,AGiBtB,CHjBuB,GAAG,AGiBtB,CHjBuB,AGiBtB,CHjBuB,CAAC,CAAC,AGiBtB,CHjBuB,EGiBpB,IAAI,CAAC,SAAS;ALTnC,AMJ8B,AC8D/B,CD9DgD,CLE9CD,AGaA,ACDA,CDCC,ACDA,CFDD,ADhBA,AKiEI,EN5DA,GAAGc,ECLA,CAAC,CAAC,IDKM,CAAC,WM4Da,EN5DA,CAAC,AM4DE,CN5DD,CAAC,EEW9B,GAAF,EIiDI,QJjDD,CAAI,gBIiDsB,CAC7B,OAAuB,EACvB,UAAkB,EAClB,eAAuB,EACvB,kBAA0B,EAAA;AN/D5B,ACLA,CAAC,CEmBC,ACDA,AEoDA,IAAM,EJtDJ,IAAM,CAAC,GAAG,ACGZ,CAAA,EGmDmB,CJtDH,CAAC,CIsDK,EJtDF,CAAC,CCGrB,AGmD0B,CHnD1B,ICDA,CAAA,GDCQ,GAAR,GCDA,CAAA,MDCS,AGmD8B,CACrC,KHpDqB,ACDX,EDCW,CCDvB,UAAa,AEqDO,EAClB,GFtDwB,EAAA,UEsDT,GAAG,UAAU,CAC7B;ANlEH,ACLA,EKyEE,ENpEEb,AGaA,ACDA,IFFA,AEEI,CAAC,AEwDA,CNpEC,AGaA,AGuDA,EJ1DF,CAAC,AFVI,ACLG,AEkBH,CDHH,CDf2B,CKyErB,CNpEHc,ACL0B,AEkBtB,AGuDA,CHvDC,ACDA,CHjB0C,EEkBvC,ACDA,AEwDJ,CHvDK,IAAI,ACDA,CDCC,MAAM,CHbZ,AGaa,AGuDX,ENpEDf,AMoEE,INpEE,AGac,CHbb,CGae,GGuDT,CAAC,CAAC,CHvDa,AGuDZ,CHvDa,QGuDJ,CAAC;ANpElB,EIa1B,CAAC,CJbyBgB,ACJ1B,AEmBE,AGsDA,IHtDI,AGsDA,EAAE,CLzED,CCcG,AFVgB,EGed,CHfcC,GGeV,CDLC,AI2DT,GNrEkB,AGeN,CHfMR,AGeL,CGsDb,ELzEc,CAAI,EEmBC,CHfD,AMqEZ,CHtDe,CGsDf,CNpEDR,MAAM;EIarB,IDEM,AGqDc,EJ1DhB,ADdA,CGiBJ,GFHU,CAAC,ACKE,AGqDO,ELxET,CCcG,CDdD,AEmBI,CFnBH,AEmBI,CFnBH,CCcG,ADdF,CCcG,CAAC,CAAC,CDdD,AEmBI,CAAC,CFnBH,AKwEW,CLxEV,AKwEW,CLxEV,CAAC,CAAC,AEmBI,CAAC,CGqDQ,CAAC,EHrDL,CAAC,ECFnC,CEuD6C,CAAC,EHrDL,EGqDS,CHrDN,AGqDO,MHrDD,EAAE,IAAI,CAAC,MAAM,CAAC;ACFjE,CAzBA,CAAA,CAAA,CHSE,AKuEkB,CLvEjB,CAAC,ECcA,IAAI,CAAC,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;ADbtC,AGeC,CHfA,EKuEE,CHnDC,ACLH,AEwDG,IHnDM,IDP8B,AEEvC,EDKe,CCLf,EDKkB,EDP4B,ECOxB,CCLtB,CAAA,OAAA,GDKkC,ACHpB,CDGqB,MAAM,CAAC,qBCHC;AHX5C,EKmEE,EHnDE,IDRA,CI2DK,CHnDC,AGmDA,CHnDC,CDRH,CAAC,CAAC,ADRU,AEgBN,CFhByB,AEiBjC,CGkDU,CJ3DH,ADR4B,AKmExB,CJ3DH,ADR+B,CCQ9B,ACSL,CFjBqC,AEiBpC,CFjBkD,AKmE5C,KHlDA,CAAC,OGkDK,CHlDG,CAAC,AGkDH,IHlDO,CAAC,MAAM,CAAC,KGkDE,CHlDI,AGkDH,CAAC,CAAC,EHlDK,MAAM,CGkDF,CAAC,CHlDI,IAAI,CAAC,MAAM,CAAC,CAAC,CAClE;IFjBH,AEkBE,AGiDA,IJ3DA,ADRE,AKmEE,CJ3DH,CAAC,ACUI,AGiDA,CHjDC,CDVH,CAAC,CAAC,ACUI,CDVH,ACUI,CDVH,GCUO,AGiDT,CHjDU,IGiDV,EHjDgB,CAAC,GGiDX,EAAA,GHjDmB,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IDTxE,ACWE,CDXD,CI2DG,ELnEF,EKmEM,CHhDC,IFnBA,CAAC,AKmEI,CLnEH,AEmBI,AGgDA,CLnEH,CAAC,CAAC,CAAC,AKmEI,CLnEH,AKmEI,kBAAkB,EAAE;EH/CxC,CAAC,CDVD,CDTC,GKmEK,aAAa,CAAC,YAAY,CAAC,CJ1D/B,GAAF,EI0DuC,CAAC,IAAI,CAAC,EJ1D1C,GAAQ,aI0DoD,CAAC;EH/ClE,EFpBI,ICUA,CCUJ,EFpBW,CCUD,ADVE,CCUD,CDVG,ECUA,IAAI,CAAC,ECUlB,CDVqB,CAAC;ACUvB,CAvCA,CAAA,CAAA,CGwFI,IJ1DA,ADVA,CAAC,CAAC,ECUE,ADVA,CCUC,ADVA,CCUC,ADVA,CAAC,CAAC;AEmBX,GGkDE,CHlDF,AGkDG,ILpEA,ICSQ,ACSX,GFlBU,AEkBV,EFlBY,CAAC,CCSK,GCSlB,CAAA,OAAA,GAEc,cAAc;EGkD3B,GLrEC,GCSC,CAAC,AI4DI,CJ5DH,EAAE,CAAC,GAAG,AI4DI,CJ5DH,AI6DR,CJ7DS,EI6DN,CAAC,YAAA;ALrET,CAAC,GCSC,AI4Da,CJ5DZ,MI4DY,aAAa,CAAC,cAAc,CAAA,CAAE;AL7D7C,EK6De,CAA8B,CJ1D3C,ADHI,AK6DwC,CACzC,IL9DM,GAA0B,AK8DzB,CAAC,IAAA,mBJ3DT,CI2DoB,EJ3DtB,AI2DsB,CAAE,CAAC;AAC3B,CAAC,GL9DC,EAAE,ECGA,ADHE,ICGI,ADHA,CCGC,GAAG,IAAI,CAAC,GAAG,CAAC;AI6DvB,IL/DE,EAAE,ECGA,ADHE,ICGE,ADHE,CCGD,CAAC;IDFR,EAAE,EAAE,ICEM,ADFF,OCES;CDDlB,CAAC,MCEE,CAAC,CAAC,EAAE,EAAE,CAAC;ADw9DC,AK15DZ,IJ7DE,AI6DI,CJ7DH,iBDu9Dc,OK15Dc,GAAG,SAA5B,yBAAyB,CAC7B,OAAuB,EACvB,UAAkB,EAClB,eAAuB,EACvB,eAAgC,EAAA;AL1BlC,EK4BE,EJlEF,EIkEQ,MAAM,GAAG,IAAI,CL5BD,UCtCnB,YIkEkC,CAAC,WAAW,CAAC;AJlEhD,ADuCA,CCjFA,AA0CC,CIoEC,GJpED,IIoEQ,CAAC,MAAM,CAAC,IAAA,QL7Be,KK6BT,EAAC,CL7B4D,QK6BnD,CAAC,CAAC,CAAC,SAAS,CAAC;AJ9GjC,IDkFX,AK6BE,IAAI,EAAE,EL7BA,CAAC,MAAM,AK6BP,GL7BU,EK6BV,MAAM,EAAA,ML7BoB,EAA8C,UClFlD;AA4ChC,MImEoB,EL5BhB,EAAE,CAAC,EK4Ba,EL5BT,GAAG,CK4BY,CL5BV,AK4BW,CL5BV,EAAE,CAAC,CK4BY,CAAC,MAAM,CAA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","file":"worker.187d61ce.js","sourceRoot":"..","sourcesContent":["export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","import $$observable from 'symbol-observable';\n\nconst NO = {};\nfunction noop() {}\n\nfunction cp<T>(a: Array<T>): Array<T> {\n  const l = a.length;\n  const b = Array(l);\n  for (let i = 0; i < l; ++i) b[i] = a[i];\n  return b;\n}\n\nfunction and<T>(f1: (t: T) => boolean, f2: (t: T) => boolean): (t: T) => boolean {\n  return function andFn(t: T): boolean {\n    return f1(t) && f2(t);\n  };\n}\n\ninterface FContainer<T, R> {\n  f(t: T): R;\n}\n\nfunction _try<T, R>(c: FContainer<T, R>, t: T, u: Stream<any>): R | {} {\n  try {\n    return c.f(t);\n  } catch (e) {\n    u._e(e);\n    return NO;\n  }\n}\n\nexport interface InternalListener<T> {\n  _n: (v: T) => void;\n  _e: (err: any) => void;\n  _c: () => void;\n}\n\nconst NO_IL: InternalListener<any> = {\n  _n: noop,\n  _e: noop,\n  _c: noop,\n};\n\nexport interface InternalProducer<T> {\n  _start(listener: InternalListener<T>): void;\n  _stop: () => void;\n}\n\nexport interface OutSender<T> {\n  out: Stream<T>;\n}\n\nexport interface Operator<T, R> extends InternalProducer<R>, InternalListener<T>, OutSender<R> {\n  type: string;\n  ins: Stream<T>;\n  _start(out: Stream<R>): void;\n}\n\nexport interface Aggregator<T, U> extends InternalProducer<U>, OutSender<U> {\n  type: string;\n  insArr: Array<Stream<T>>;\n  _start(out: Stream<U>): void;\n}\n\nexport interface Producer<T> {\n  start: (listener: Listener<T>) => void;\n  stop: () => void;\n}\n\nexport interface Listener<T> {\n  next: (x: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport interface Subscription {\n  unsubscribe(): void;\n}\n\nexport interface Observable<T> {\n  subscribe(listener: Listener<T>): Subscription;\n}\n\n// mutates the input\nfunction internalizeProducer<T>(producer: Producer<T> & Partial<InternalProducer<T>>) {\n  producer._start = function _start(il: InternalListener<T> & Partial<Listener<T>>) {\n    il.next = il._n;\n    il.error = il._e;\n    il.complete = il._c;\n    this.start(il);\n  };\n  producer._stop = producer.stop;\n}\n\nclass StreamSub<T> implements Subscription {\n  constructor(private _stream: Stream<T>, private _listener: InternalListener<T>) {}\n\n  unsubscribe(): void {\n    this._stream._remove(this._listener);\n  }\n}\n\nclass Observer<T> implements Listener<T> {\n  constructor(private _listener: InternalListener<T>) {}\n\n  next(value: T) {\n    this._listener._n(value);\n  }\n\n  error(err: any) {\n    this._listener._e(err);\n  }\n\n  complete() {\n    this._listener._c();\n  }\n}\n\nclass FromObservable<T> implements InternalProducer<T> {\n  public type = 'fromObservable';\n  public ins: Observable<T>;\n  public out: Stream<T>;\n  private active: boolean;\n  private _sub: Subscription | undefined;\n\n  constructor(observable: Observable<T>) {\n    this.ins = observable;\n    this.active = false;\n  }\n\n  _start(out: Stream<T>) {\n    this.out = out;\n    this.active = true;\n    this._sub = this.ins.subscribe(new Observer(out));\n    if (!this.active) this._sub.unsubscribe();\n  }\n\n  _stop() {\n    if (this._sub) this._sub.unsubscribe();\n    this.active = false;\n  }\n}\n\nexport interface MergeSignature {\n  (): Stream<any>;\n  <T1>(s1: Stream<T1>): Stream<T1>;\n  <T1, T2>(\n    s1: Stream<T1>,\n    s2: Stream<T2>): Stream<T1 | T2>;\n  <T1, T2, T3>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>): Stream<T1 | T2 | T3>;\n  <T1, T2, T3, T4>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>): Stream<T1 | T2 | T3 | T4>;\n  <T1, T2, T3, T4, T5>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>): Stream<T1 | T2 | T3 | T4 | T5>;\n  <T1, T2, T3, T4, T5, T6>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>): Stream<T1 | T2 | T3 | T4 | T5 | T6>;\n  <T1, T2, T3, T4, T5, T6, T7>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7>;\n  <T1, T2, T3, T4, T5, T6, T7, T8>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>,\n    s10: Stream<T10>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10>;\n  <T>(...stream: Array<Stream<T>>): Stream<T>;\n}\n\nclass Merge<T> implements Aggregator<T, T>, InternalListener<T> {\n  public type = 'merge';\n  public insArr: Array<Stream<T>>;\n  public out: Stream<T>;\n  private ac: number; // ac is activeCount\n\n  constructor(insArr: Array<Stream<T>>) {\n    this.insArr = insArr;\n    this.out = NO as Stream<T>;\n    this.ac = 0;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    const s = this.insArr;\n    const L = s.length;\n    this.ac = L;\n    for (let i = 0; i < L; i++) s[i]._add(this);\n  }\n\n  _stop(): void {\n    const s = this.insArr;\n    const L = s.length;\n    for (let i = 0; i < L; i++) s[i]._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    if (--this.ac <= 0) {\n      const u = this.out;\n      if (u === NO) return;\n      u._c();\n    }\n  }\n}\n\nexport interface CombineSignature {\n  (): Stream<Array<any>>;\n  <T1>(s1: Stream<T1>): Stream<[T1]>;\n  <T1, T2>(\n    s1: Stream<T1>,\n    s2: Stream<T2>): Stream<[T1, T2]>;\n  <T1, T2, T3>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>): Stream<[T1, T2, T3]>;\n  <T1, T2, T3, T4>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>): Stream<[T1, T2, T3, T4]>;\n  <T1, T2, T3, T4, T5>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>): Stream<[T1, T2, T3, T4, T5]>;\n  <T1, T2, T3, T4, T5, T6>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>): Stream<[T1, T2, T3, T4, T5, T6]>;\n  <T1, T2, T3, T4, T5, T6, T7>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>): Stream<[T1, T2, T3, T4, T5, T6, T7]>;\n  <T1, T2, T3, T4, T5, T6, T7, T8>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>): Stream<[T1, T2, T3, T4, T5, T6, T7, T8]>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>): Stream<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>,\n    s10: Stream<T10>): Stream<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\n  (...stream: Array<Stream<any>>): Stream<Array<any>>;\n}\n\nclass CombineListener<T> implements InternalListener<T>, OutSender<Array<T>> {\n  private i: number;\n  public out: Stream<Array<T>>;\n  private p: Combine<T>;\n\n  constructor(i: number, out: Stream<Array<T>>, p: Combine<T>) {\n    this.i = i;\n    this.out = out;\n    this.p = p;\n    p.ils.push(this);\n  }\n\n  _n(t: T): void {\n    const p = this.p, out = this.out;\n    if (out === NO) return;\n    if (p.up(t, this.i)) {\n      const a = p.vals;\n      const l = a.length;\n      const b = Array(l);\n      for (let i = 0; i < l; ++i) b[i] = a[i];\n      out._n(b);\n    }\n  }\n\n  _e(err: any): void {\n    const out = this.out;\n    if (out === NO) return;\n    out._e(err);\n  }\n\n  _c(): void {\n    const p = this.p;\n    if (p.out === NO) return;\n    if (--p.Nc === 0) p.out._c();\n  }\n}\n\nclass Combine<R> implements Aggregator<any, Array<R>> {\n  public type = 'combine';\n  public insArr: Array<Stream<any>>;\n  public out: Stream<Array<R>>;\n  public ils: Array<CombineListener<any>>;\n  public Nc: number; // *N*umber of streams still to send *c*omplete\n  public Nn: number; // *N*umber of streams still to send *n*ext\n  public vals: Array<R>;\n\n  constructor(insArr: Array<Stream<any>>) {\n    this.insArr = insArr;\n    this.out = NO as Stream<Array<R>>;\n    this.ils = [];\n    this.Nc = this.Nn = 0;\n    this.vals = [];\n  }\n\n  up(t: any, i: number): boolean {\n    const v = this.vals[i];\n    const Nn = !this.Nn ? 0 : v === NO ? --this.Nn : this.Nn;\n    this.vals[i] = t;\n    return Nn === 0;\n  }\n\n  _start(out: Stream<Array<R>>): void {\n    this.out = out;\n    const s = this.insArr;\n    const n = this.Nc = this.Nn = s.length;\n    const vals = this.vals = new Array(n);\n    if (n === 0) {\n      out._n([]);\n      out._c();\n    } else {\n      for (let i = 0; i < n; i++) {\n        vals[i] = NO;\n        s[i]._add(new CombineListener(i, out, this));\n      }\n    }\n  }\n\n  _stop(): void {\n    const s = this.insArr;\n    const n = s.length;\n    const ils = this.ils;\n    for (let i = 0; i < n; i++) s[i]._remove(ils[i]);\n    this.out = NO as Stream<Array<R>>;\n    this.ils = [];\n    this.vals = [];\n  }\n}\n\nclass FromArray<T> implements InternalProducer<T> {\n  public type = 'fromArray';\n  public a: Array<T>;\n\n  constructor(a: Array<T>) {\n    this.a = a;\n  }\n\n  _start(out: InternalListener<T>): void {\n    const a = this.a;\n    for (let i = 0, n = a.length; i < n; i++) out._n(a[i]);\n    out._c();\n  }\n\n  _stop(): void {\n  }\n}\n\nclass FromPromise<T> implements InternalProducer<T> {\n  public type = 'fromPromise';\n  public on: boolean;\n  public p: PromiseLike<T>;\n\n  constructor(p: PromiseLike<T>) {\n    this.on = false;\n    this.p = p;\n  }\n\n  _start(out: InternalListener<T>): void {\n    const prod = this;\n    this.on = true;\n    this.p.then(\n      (v: T) => {\n        if (prod.on) {\n          out._n(v);\n          out._c();\n        }\n      },\n      (e: any) => {\n        out._e(e);\n      },\n    ).then(noop, (err: any) => {\n      setTimeout(() => { throw err; });\n    });\n  }\n\n  _stop(): void {\n    this.on = false;\n  }\n}\n\nclass Periodic implements InternalProducer<number> {\n  public type = 'periodic';\n  public period: number;\n  private intervalID: any;\n  private i: number;\n\n  constructor(period: number) {\n    this.period = period;\n    this.intervalID = -1;\n    this.i = 0;\n  }\n\n  _start(out: InternalListener<number>): void {\n    const self = this;\n    function intervalHandler() { out._n(self.i++); }\n    this.intervalID = setInterval(intervalHandler, this.period);\n  }\n\n  _stop(): void {\n    if (this.intervalID !== -1) clearInterval(this.intervalID);\n    this.intervalID = -1;\n    this.i = 0;\n  }\n}\n\nclass Debug<T> implements Operator<T, T> {\n  public type = 'debug';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  private s: (t: T) => any; // spy\n  private l: string; // label\n\n  constructor(ins: Stream<T>);\n  constructor(ins: Stream<T>, arg?: string);\n  constructor(ins: Stream<T>, arg?: (t: T) => any);\n  constructor(ins: Stream<T>, arg?: string | ((t: T) => any));\n  constructor(ins: Stream<T>, arg?: string | ((t: T) => any) | undefined) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.s = noop;\n    this.l = '';\n    if (typeof arg === 'string') this.l = arg; else if (typeof arg === 'function') this.s = arg;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const s = this.s, l = this.l;\n    if (s !== noop) {\n      try {\n        s(t);\n      } catch (e) {\n        u._e(e);\n      }\n    } else if (l) console.log(l + ':', t); else console.log(t);\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass Drop<T> implements Operator<T, T> {\n  public type = 'drop';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public max: number;\n  private dropped: number;\n\n  constructor(max: number, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.max = max;\n    this.dropped = 0;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.dropped = 0;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    if (this.dropped++ >= this.max) u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass EndWhenListener<T> implements InternalListener<any> {\n  private out: Stream<T>;\n  private op: EndWhen<T>;\n\n  constructor(out: Stream<T>, op: EndWhen<T>) {\n    this.out = out;\n    this.op = op;\n  }\n\n  _n() {\n    this.op.end();\n  }\n\n  _e(err: any) {\n    this.out._e(err);\n  }\n\n  _c() {\n    this.op.end();\n  }\n}\n\nclass EndWhen<T> implements Operator<T, T> {\n  public type = 'endWhen';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public o: Stream<any>; // o = other\n  private oil: InternalListener<any>; // oil = other InternalListener\n\n  constructor(o: Stream<any>, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.o = o;\n    this.oil = NO_IL;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.o._add(this.oil = new EndWhenListener(out, this));\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.o._remove(this.oil);\n    this.out = NO as Stream<T>;\n    this.oil = NO_IL;\n  }\n\n  end(): void {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    this.end();\n  }\n}\n\nclass Filter<T> implements Operator<T, T> {\n  public type = 'filter';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public f: (t: T) => boolean;\n\n  constructor(passes: (t: T) => boolean, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.f = passes;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const r = _try(this, t, u);\n    if (r === NO || !r) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass FlattenListener<T> implements InternalListener<T> {\n  private out: Stream<T>;\n  private op: Flatten<T>;\n\n  constructor(out: Stream<T>, op: Flatten<T>) {\n    this.out = out;\n    this.op = op;\n  }\n\n  _n(t: T) {\n    this.out._n(t);\n  }\n\n  _e(err: any) {\n    this.out._e(err);\n  }\n\n  _c() {\n    this.op.inner = NO as Stream<T>;\n    this.op.less();\n  }\n}\n\nclass Flatten<T> implements Operator<Stream<T>, T> {\n  public type = 'flatten';\n  public ins: Stream<Stream<T>>;\n  public out: Stream<T>;\n  private open: boolean;\n  public inner: Stream<T>; // Current inner Stream\n  private il: InternalListener<T>; // Current inner InternalListener\n\n  constructor(ins: Stream<Stream<T>>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.open = true;\n    this.inner = NO as Stream<T>;\n    this.il = NO_IL;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.open = true;\n    this.inner = NO as Stream<T>;\n    this.il = NO_IL;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    if (this.inner !== NO) this.inner._remove(this.il);\n    this.out = NO as Stream<T>;\n    this.open = true;\n    this.inner = NO as Stream<T>;\n    this.il = NO_IL;\n  }\n\n  less(): void {\n    const u = this.out;\n    if (u === NO) return;\n    if (!this.open && this.inner === NO) u._c();\n  }\n\n  _n(s: Stream<T>) {\n    const u = this.out;\n    if (u === NO) return;\n    const {inner, il} = this;\n    if (inner !== NO && il !== NO_IL) inner._remove(il);\n    (this.inner = s)._add(this.il = new FlattenListener(u, this));\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    this.open = false;\n    this.less();\n  }\n}\n\nclass Fold<T, R> implements Operator<T, R> {\n  public type = 'fold';\n  public ins: Stream<T>;\n  public out: Stream<R>;\n  public f: (t: T) => R;\n  public seed: R;\n  private acc: R; // initialized as seed\n\n  constructor(f: (acc: R, t: T) => R, seed: R, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<R>;\n    this.f = (t: T) => f(this.acc, t);\n    this.acc = this.seed = seed;\n  }\n\n  _start(out: Stream<R>): void {\n    this.out = out;\n    this.acc = this.seed;\n    out._n(this.acc);\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<R>;\n    this.acc = this.seed;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const r = _try(this, t, u);\n    if (r === NO) return;\n    u._n(this.acc = r as R);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass Last<T> implements Operator<T, T> {\n  public type = 'last';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  private has: boolean;\n  private val: T;\n\n  constructor(ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.has = false;\n    this.val = NO as T;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.has = false;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n    this.val = NO as T;\n  }\n\n  _n(t: T) {\n    this.has = true;\n    this.val = t;\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    if (this.has) {\n      u._n(this.val);\n      u._c();\n    } else u._e(new Error('last() failed because input stream completed'));\n  }\n}\n\nclass MapOp<T, R> implements Operator<T, R> {\n  public type = 'map';\n  public ins: Stream<T>;\n  public out: Stream<R>;\n  public f: (t: T) => R;\n\n  constructor(project: (t: T) => R, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<R>;\n    this.f = project;\n  }\n\n  _start(out: Stream<R>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<R>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const r = _try(this, t, u);\n    if (r === NO) return;\n    u._n(r as R);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass Remember<T> implements InternalProducer<T> {\n  public type = 'remember';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n\n  constructor(ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(out);\n  }\n\n  _stop(): void {\n    this.ins._remove(this.out);\n    this.out = NO as Stream<T>;\n  }\n}\n\nclass ReplaceError<T> implements Operator<T, T> {\n  public type = 'replaceError';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public f: (err: any) => Stream<T>;\n\n  constructor(replacer: (err: any) => Stream<T>, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.f = replacer;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    try {\n      this.ins._remove(this);\n      (this.ins = this.f(err))._add(this);\n    } catch (e) {\n      u._e(e);\n    }\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass StartWith<T> implements InternalProducer<T> {\n  public type = 'startWith';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public val: T;\n\n  constructor(ins: Stream<T>, val: T) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.val = val;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.out._n(this.val);\n    this.ins._add(out);\n  }\n\n  _stop(): void {\n    this.ins._remove(this.out);\n    this.out = NO as Stream<T>;\n  }\n}\n\nclass Take<T> implements Operator<T, T> {\n  public type = 'take';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public max: number;\n  private taken: number;\n\n  constructor(max: number, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.max = max;\n    this.taken = 0;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.taken = 0;\n    if (this.max <= 0) out._c(); else this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const m = ++this.taken;\n    if (m < this.max) u._n(t); else if (m === this.max) {\n      u._n(t);\n      u._c();\n    }\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nexport class Stream<T> implements InternalListener<T> {\n  public _prod: InternalProducer<T>;\n  protected _ils: Array<InternalListener<T>>; // 'ils' = Internal listeners\n  protected _stopID: any;\n  protected _dl: InternalListener<T>; // the debug listener\n  protected _d: boolean; // flag indicating the existence of the debug listener\n  protected _target: Stream<T>; // imitation target if this Stream will imitate\n  protected _err: any;\n\n  constructor(producer?: InternalProducer<T>) {\n    this._prod = producer || NO as InternalProducer<T>;\n    this._ils = [];\n    this._stopID = NO;\n    this._dl = NO as InternalListener<T>;\n    this._d = false;\n    this._target = NO as Stream<T>;\n    this._err = NO;\n  }\n\n  _n(t: T): void {\n    const a = this._ils;\n    const L = a.length;\n    if (this._d) this._dl._n(t);\n    if (L == 1) a[0]._n(t); else if (L == 0) return; else {\n      const b = cp(a);\n      for (let i = 0; i < L; i++) b[i]._n(t);\n    }\n  }\n\n  _e(err: any): void {\n    if (this._err !== NO) return;\n    this._err = err;\n    const a = this._ils;\n    const L = a.length;\n    this._x();\n    if (this._d) this._dl._e(err);\n    if (L == 1) a[0]._e(err); else if (L == 0) return; else {\n      const b = cp(a);\n      for (let i = 0; i < L; i++) b[i]._e(err);\n    }\n    if (!this._d && L == 0) throw this._err;\n  }\n\n  _c(): void {\n    const a = this._ils;\n    const L = a.length;\n    this._x();\n    if (this._d) this._dl._c();\n    if (L == 1) a[0]._c(); else if (L == 0) return; else {\n      const b = cp(a);\n      for (let i = 0; i < L; i++) b[i]._c();\n    }\n  }\n\n  _x(): void { // tear down logic, after error or complete\n    if (this._ils.length === 0) return;\n    if (this._prod !== NO) this._prod._stop();\n    this._err = NO;\n    this._ils = [];\n  }\n\n  _stopNow() {\n    // WARNING: code that calls this method should\n    // first check if this._prod is valid (not `NO`)\n    this._prod._stop();\n    this._err = NO;\n    this._stopID = NO;\n  }\n\n  _add(il: InternalListener<T>): void {\n    const ta = this._target;\n    if (ta !== NO) return ta._add(il);\n    const a = this._ils;\n    a.push(il);\n    if (a.length > 1) return;\n    if (this._stopID !== NO) {\n      clearTimeout(this._stopID);\n      this._stopID = NO;\n    } else {\n      const p = this._prod;\n      if (p !== NO) p._start(this);\n    }\n  }\n\n  _remove(il: InternalListener<T>): void {\n    const ta = this._target;\n    if (ta !== NO) return ta._remove(il);\n    const a = this._ils;\n    const i = a.indexOf(il);\n    if (i > -1) {\n      a.splice(i, 1);\n      if (this._prod !== NO && a.length <= 0) {\n        this._err = NO;\n        this._stopID = setTimeout(() => this._stopNow());\n      } else if (a.length === 1) {\n        this._pruneCycles();\n      }\n    }\n  }\n\n  // If all paths stemming from `this` stream eventually end at `this`\n  // stream, then we remove the single listener of `this` stream, to\n  // force it to end its execution and dispose resources. This method\n  // assumes as a precondition that this._ils has just one listener.\n  _pruneCycles() {\n    if (this._hasNoSinks(this, [])) this._remove(this._ils[0]);\n  }\n\n  // Checks whether *there is no* path starting from `x` that leads to an end\n  // listener (sink) in the stream graph, following edges A->B where B is a\n  // listener of A. This means these paths constitute a cycle somehow. Is given\n  // a trace of all visited nodes so far.\n  _hasNoSinks(x: InternalListener<any>, trace: Array<any>): boolean {\n    if (trace.indexOf(x) !== -1)\n      return true; else\n    if ((x as any as OutSender<any>).out === this)\n      return true; else\n    if ((x as any as OutSender<any>).out && (x as any as OutSender<any>).out !== NO)\n      return this._hasNoSinks((x as any as OutSender<any>).out, trace.concat(x)); else\n    if ((x as Stream<any>)._ils) {\n      for (let i = 0, N = (x as Stream<any>)._ils.length; i < N; i++)\n        if (!this._hasNoSinks((x as Stream<any>)._ils[i], trace.concat(x)))\n          return false;\n      return true;\n    } else return false;\n  }\n\n  private ctor(): typeof Stream {\n    return this instanceof MemoryStream ? MemoryStream : Stream;\n  }\n\n  /**\n   * Adds a Listener to the Stream.\n   *\n   * @param {Listener} listener\n   */\n  addListener(listener: Partial<Listener<T>>): void {\n    (listener as InternalListener<T>)._n = listener.next || noop;\n    (listener as InternalListener<T>)._e = listener.error || noop;\n    (listener as InternalListener<T>)._c = listener.complete || noop;\n    this._add(listener as InternalListener<T>);\n  }\n\n  /**\n   * Removes a Listener from the Stream, assuming the Listener was added to it.\n   *\n   * @param {Listener<T>} listener\n   */\n  removeListener(listener: Partial<Listener<T>>): void {\n    this._remove(listener as InternalListener<T>);\n  }\n\n  /**\n   * Adds a Listener to the Stream returning a Subscription to remove that\n   * listener.\n   *\n   * @param {Listener} listener\n   * @returns {Subscription}\n   */\n  subscribe(listener: Partial<Listener<T>>): Subscription {\n    this.addListener(listener);\n    return new StreamSub<T>(this, listener as InternalListener<T>);\n  }\n\n  /**\n   * Add interop between most.js and RxJS 5\n   *\n   * @returns {Stream}\n   */\n  [$$observable](): Stream<T> {\n    return this;\n  }\n\n  /**\n   * Creates a new Stream given a Producer.\n   *\n   * @factory true\n   * @param {Producer} producer An optional Producer that dictates how to\n   * start, generate events, and stop the Stream.\n   * @return {Stream}\n   */\n  static create<T>(producer?: Producer<T>): Stream<T> {\n    if (producer) {\n      if (typeof producer.start !== 'function'\n      || typeof producer.stop !== 'function')\n        throw new Error('producer requires both start and stop functions');\n      internalizeProducer(producer); // mutates the input\n    }\n    return new Stream(producer as InternalProducer<T> & Producer<T>);\n  }\n\n  /**\n   * Creates a new MemoryStream given a Producer.\n   *\n   * @factory true\n   * @param {Producer} producer An optional Producer that dictates how to\n   * start, generate events, and stop the Stream.\n   * @return {MemoryStream}\n   */\n  static createWithMemory<T>(producer?: Producer<T>): MemoryStream<T> {\n    if (producer) internalizeProducer(producer); // mutates the input\n    return new MemoryStream<T>(producer as InternalProducer<T> & Producer<T>);\n  }\n\n  /**\n   * Creates a Stream that does nothing when started. It never emits any event.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   *          never\n   * -----------------------\n   * ```\n   *\n   * @factory true\n   * @return {Stream}\n   */\n  static never(): Stream<any> {\n    return new Stream<any>({_start: noop, _stop: noop});\n  }\n\n  /**\n   * Creates a Stream that immediately emits the \"complete\" notification when\n   * started, and that's it.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * empty\n   * -|\n   * ```\n   *\n   * @factory true\n   * @return {Stream}\n   */\n  static empty(): Stream<any> {\n    return new Stream<any>({\n      _start(il: InternalListener<any>) { il._c(); },\n      _stop: noop,\n    });\n  }\n\n  /**\n   * Creates a Stream that immediately emits an \"error\" notification with the\n   * value you passed as the `error` argument when the stream starts, and that's\n   * it.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * throw(X)\n   * -X\n   * ```\n   *\n   * @factory true\n   * @param error The error event to emit on the created stream.\n   * @return {Stream}\n   */\n  static throw(error: any): Stream<any> {\n    return new Stream<any>({\n      _start(il: InternalListener<any>) { il._e(error); },\n      _stop: noop,\n    });\n  }\n\n  /**\n   * Creates a stream from an Array, Promise, or an Observable.\n   *\n   * @factory true\n   * @param {Array|PromiseLike|Observable} input The input to make a stream from.\n   * @return {Stream}\n   */\n  static from<T>(input: PromiseLike<T> | Stream<T> | Array<T> | Observable<T>): Stream<T> {\n    if (typeof input[$$observable] === 'function')\n      return Stream.fromObservable<T>(input as Observable<T>); else\n    if (typeof (input as PromiseLike<T>).then === 'function')\n      return Stream.fromPromise<T>(input as PromiseLike<T>); else\n    if (Array.isArray(input))\n      return Stream.fromArray<T>(input);\n\n    throw new TypeError(`Type of input to from() must be an Array, Promise, or Observable`);\n  }\n\n  /**\n   * Creates a Stream that immediately emits the arguments that you give to\n   * *of*, then completes.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * of(1,2,3)\n   * 123|\n   * ```\n   *\n   * @factory true\n   * @param a The first value you want to emit as an event on the stream.\n   * @param b The second value you want to emit as an event on the stream. One\n   * or more of these values may be given as arguments.\n   * @return {Stream}\n   */\n  static of<T>(...items: Array<T>): Stream<T> {\n    return Stream.fromArray<T>(items);\n  }\n\n  /**\n   * Converts an array to a stream. The returned stream will emit synchronously\n   * all the items in the array, and then complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * fromArray([1,2,3])\n   * 123|\n   * ```\n   *\n   * @factory true\n   * @param {Array} array The array to be converted as a stream.\n   * @return {Stream}\n   */\n  static fromArray<T>(array: Array<T>): Stream<T> {\n    return new Stream<T>(new FromArray<T>(array));\n  }\n\n  /**\n   * Converts a promise to a stream. The returned stream will emit the resolved\n   * value of the promise, and then complete. However, if the promise is\n   * rejected, the stream will emit the corresponding error.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * fromPromise( ----42 )\n   * -----------------42|\n   * ```\n   *\n   * @factory true\n   * @param {PromiseLike} promise The promise to be converted as a stream.\n   * @return {Stream}\n   */\n  static fromPromise<T>(promise: PromiseLike<T>): Stream<T> {\n    return new Stream<T>(new FromPromise<T>(promise));\n  }\n\n  /**\n   * Converts an Observable into a Stream.\n   *\n   * @factory true\n   * @param {any} observable The observable to be converted as a stream.\n   * @return {Stream}\n   */\n  static fromObservable<T>(obs: {subscribe: any}): Stream<T> {\n    if ((obs as Stream<T>).endWhen) return obs as Stream<T>;\n    const o = typeof obs[$$observable] === 'function' ? obs[$$observable]() : obs;\n    return new Stream<T>(new FromObservable(o));\n  }\n\n  /**\n   * Creates a stream that periodically emits incremental numbers, every\n   * `period` milliseconds.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   *     periodic(1000)\n   * ---0---1---2---3---4---...\n   * ```\n   *\n   * @factory true\n   * @param {number} period The interval in milliseconds to use as a rate of\n   * emission.\n   * @return {Stream}\n   */\n  static periodic(period: number): Stream<number> {\n    return new Stream<number>(new Periodic(period));\n  }\n\n  /**\n   * Blends multiple streams together, emitting events from all of them\n   * concurrently.\n   *\n   * *merge* takes multiple streams as arguments, and creates a stream that\n   * behaves like each of the argument streams, in parallel.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3--------4---\n   * ----a-----b----c---d------\n   *            merge\n   * --1-a--2--b--3-c---d--4---\n   * ```\n   *\n   * @factory true\n   * @param {Stream} stream1 A stream to merge together with other streams.\n   * @param {Stream} stream2 A stream to merge together with other streams. Two\n   * or more streams may be given as arguments.\n   * @return {Stream}\n   */\n  static merge: MergeSignature = function merge(...streams: Array<Stream<any>>) {\n    return new Stream<any>(new Merge(streams));\n  } as MergeSignature;\n\n  /**\n   * Combines multiple input streams together to return a stream whose events\n   * are arrays that collect the latest events from each input stream.\n   *\n   * *combine* internally remembers the most recent event from each of the input\n   * streams. When any of the input streams emits an event, that event together\n   * with all the other saved events are combined into an array. That array will\n   * be emitted on the output stream. It's essentially a way of joining together\n   * the events from multiple streams.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3--------4---\n   * ----a-----b-----c--d------\n   *          combine\n   * ----1a-2a-2b-3b-3c-3d-4d--\n   * ```\n   *\n   * @factory true\n   * @param {Stream} stream1 A stream to combine together with other streams.\n   * @param {Stream} stream2 A stream to combine together with other streams.\n   * Multiple streams, not just two, may be given as arguments.\n   * @return {Stream}\n   */\n  static combine: CombineSignature = function combine(...streams: Array<Stream<any>>) {\n    return new Stream<Array<any>>(new Combine<any>(streams));\n  } as CombineSignature;\n\n  protected _map<U>(project: (t: T) => U): Stream<U> | MemoryStream<U> {\n    return new (this.ctor())<U>(new MapOp<T, U>(project, this));\n  }\n\n  /**\n   * Transforms each event from the input Stream through a `project` function,\n   * to get a Stream that emits those transformed events.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---3--5-----7------\n   *    map(i => i * 10)\n   * --10--30-50----70-----\n   * ```\n   *\n   * @param {Function} project A function of type `(t: T) => U` that takes event\n   * `t` of type `T` from the input Stream and produces an event of type `U`, to\n   * be emitted on the output Stream.\n   * @return {Stream}\n   */\n  map<U>(project: (t: T) => U): Stream<U> {\n    return this._map(project);\n  }\n\n  /**\n   * It's like `map`, but transforms each input event to always the same\n   * constant value on the output Stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---3--5-----7-----\n   *       mapTo(10)\n   * --10--10-10----10----\n   * ```\n   *\n   * @param projectedValue A value to emit on the output Stream whenever the\n   * input Stream emits any value.\n   * @return {Stream}\n   */\n  mapTo<U>(projectedValue: U): Stream<U> {\n    const s = this.map(() => projectedValue);\n    const op: Operator<T, U> = s._prod as Operator<T, U>;\n    op.type = 'mapTo';\n    return s;\n  }\n\n  filter<S extends T>(passes: (t: T) => t is S): Stream<S>;\n  filter(passes: (t: T) => boolean): Stream<T>;\n  /**\n   * Only allows events that pass the test given by the `passes` argument.\n   *\n   * Each event from the input stream is given to the `passes` function. If the\n   * function returns `true`, the event is forwarded to the output stream,\n   * otherwise it is ignored and not forwarded.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---2--3-----4-----5---6--7-8--\n   *     filter(i => i % 2 === 0)\n   * ------2--------4---------6----8--\n   * ```\n   *\n   * @param {Function} passes A function of type `(t: T) => boolean` that takes\n   * an event from the input stream and checks if it passes, by returning a\n   * boolean.\n   * @return {Stream}\n   */\n  filter(passes: (t: T) => boolean): Stream<T> {\n    const p = this._prod;\n    if (p instanceof Filter)\n      return new Stream<T>(new Filter<T>(\n        and((p as Filter<T>).f, passes),\n        (p as Filter<T>).ins\n      ));\n    return new Stream<T>(new Filter<T>(passes, this));\n  }\n\n  /**\n   * Lets the first `amount` many events from the input stream pass to the\n   * output stream, then makes the output stream complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c----d---e--\n   *    take(3)\n   * --a---b--c|\n   * ```\n   *\n   * @param {number} amount How many events to allow from the input stream\n   * before completing the output stream.\n   * @return {Stream}\n   */\n  take(amount: number): Stream<T> {\n    return new (this.ctor())<T>(new Take<T>(amount, this));\n  }\n\n  /**\n   * Ignores the first `amount` many events from the input stream, and then\n   * after that starts forwarding events from the input stream to the output\n   * stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c----d---e--\n   *       drop(3)\n   * --------------d---e--\n   * ```\n   *\n   * @param {number} amount How many events to ignore from the input stream\n   * before forwarding all events from the input stream to the output stream.\n   * @return {Stream}\n   */\n  drop(amount: number): Stream<T> {\n    return new Stream<T>(new Drop<T>(amount, this));\n  }\n\n  /**\n   * When the input stream completes, the output stream will emit the last event\n   * emitted by the input stream, and then will also complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c--d----|\n   *       last()\n   * -----------------d|\n   * ```\n   *\n   * @return {Stream}\n   */\n  last(): Stream<T> {\n    return new Stream<T>(new Last<T>(this));\n  }\n\n  /**\n   * Prepends the given `initial` value to the sequence of events emitted by the\n   * input stream. The returned stream is a MemoryStream, which means it is\n   * already `remember()`'d.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ---1---2-----3---\n   *   startWith(0)\n   * 0--1---2-----3---\n   * ```\n   *\n   * @param initial The value or event to prepend.\n   * @return {MemoryStream}\n   */\n  startWith(initial: T): MemoryStream<T> {\n    return new MemoryStream<T>(new StartWith<T>(this, initial));\n  }\n\n  /**\n   * Uses another stream to determine when to complete the current stream.\n   *\n   * When the given `other` stream emits an event or completes, the output\n   * stream will complete. Before that happens, the output stream will behaves\n   * like the input stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ---1---2-----3--4----5----6---\n   *   endWhen( --------a--b--| )\n   * ---1---2-----3--4--|\n   * ```\n   *\n   * @param other Some other stream that is used to know when should the output\n   * stream of this operator complete.\n   * @return {Stream}\n   */\n  endWhen(other: Stream<any>): Stream<T> {\n    return new (this.ctor())<T>(new EndWhen<T>(other, this));\n  }\n\n  /**\n   * \"Folds\" the stream onto itself.\n   *\n   * Combines events from the past throughout\n   * the entire execution of the input stream, allowing you to accumulate them\n   * together. It's essentially like `Array.prototype.reduce`. The returned\n   * stream is a MemoryStream, which means it is already `remember()`'d.\n   *\n   * The output stream starts by emitting the `seed` which you give as argument.\n   * Then, when an event happens on the input stream, it is combined with that\n   * seed value through the `accumulate` function, and the output value is\n   * emitted on the output stream. `fold` remembers that output value as `acc`\n   * (\"accumulator\"), and then when a new input event `t` happens, `acc` will be\n   * combined with that to produce the new `acc` and so forth.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ------1-----1--2----1----1------\n   *   fold((acc, x) => acc + x, 3)\n   * 3-----4-----5--7----8----9------\n   * ```\n   *\n   * @param {Function} accumulate A function of type `(acc: R, t: T) => R` that\n   * takes the previous accumulated value `acc` and the incoming event from the\n   * input stream and produces the new accumulated value.\n   * @param seed The initial accumulated value, of type `R`.\n   * @return {MemoryStream}\n   */\n  fold<R>(accumulate: (acc: R, t: T) => R, seed: R): MemoryStream<R> {\n    return new MemoryStream<R>(new Fold<T, R>(accumulate, seed, this));\n  }\n\n  /**\n   * Replaces an error with another stream.\n   *\n   * When (and if) an error happens on the input stream, instead of forwarding\n   * that error to the output stream, *replaceError* will call the `replace`\n   * function which returns the stream that the output stream will replicate.\n   * And, in case that new stream also emits an error, `replace` will be called\n   * again to get another stream to start replicating.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---2-----3--4-----X\n   *   replaceError( () => --10--| )\n   * --1---2-----3--4--------10--|\n   * ```\n   *\n   * @param {Function} replace A function of type `(err) => Stream` that takes\n   * the error that occurred on the input stream or on the previous replacement\n   * stream and returns a new stream. The output stream will behave like the\n   * stream that this function returns.\n   * @return {Stream}\n   */\n  replaceError(replace: (err: any) => Stream<T>): Stream<T> {\n    return new (this.ctor())<T>(new ReplaceError<T>(replace, this));\n  }\n\n  /**\n   * Flattens a \"stream of streams\", handling only one nested stream at a time\n   * (no concurrency).\n   *\n   * If the input stream is a stream that emits streams, then this operator will\n   * return an output stream which is a flat stream: emits regular events. The\n   * flattening happens without concurrency. It works like this: when the input\n   * stream emits a nested stream, *flatten* will start imitating that nested\n   * one. However, as soon as the next nested stream is emitted on the input\n   * stream, *flatten* will forget the previous nested one it was imitating, and\n   * will start imitating the new nested one.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --+--------+---------------\n   *   \\        \\\n   *    \\       ----1----2---3--\n   *    --a--b----c----d--------\n   *           flatten\n   * -----a--b------1----2---3--\n   * ```\n   *\n   * @return {Stream}\n   */\n  flatten<R>(this: Stream<Stream<R>>): T {\n    const p = this._prod;\n    return new Stream<R>(new Flatten(this)) as T & Stream<R>;\n  }\n\n  /**\n   * Passes the input stream to a custom operator, to produce an output stream.\n   *\n   * *compose* is a handy way of using an existing function in a chained style.\n   * Instead of writing `outStream = f(inStream)` you can write\n   * `outStream = inStream.compose(f)`.\n   *\n   * @param {function} operator A function that takes a stream as input and\n   * returns a stream as well.\n   * @return {Stream}\n   */\n  compose<U>(operator: (stream: Stream<T>) => U): U {\n    return operator(this);\n  }\n\n  /**\n   * Returns an output stream that behaves like the input stream, but also\n   * remembers the most recent event that happens on the input stream, so that a\n   * newly added listener will immediately receive that memorised event.\n   *\n   * @return {MemoryStream}\n   */\n  remember(): MemoryStream<T> {\n    return new MemoryStream<T>(new Remember<T>(this));\n  }\n\n  debug(): Stream<T>;\n  debug(labelOrSpy: string): Stream<T>;\n  debug(labelOrSpy: (t: T) => any): Stream<T>;\n  /**\n   * Returns an output stream that identically behaves like the input stream,\n   * but also runs a `spy` function for each event, to help you debug your app.\n   *\n   * *debug* takes a `spy` function as argument, and runs that for each event\n   * happening on the input stream. If you don't provide the `spy` argument,\n   * then *debug* will just `console.log` each event. This helps you to\n   * understand the flow of events through some operator chain.\n   *\n   * Please note that if the output stream has no listeners, then it will not\n   * start, which means `spy` will never run because no actual event happens in\n   * that case.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3-----4--\n   *         debug\n   * --1----2-----3-----4--\n   * ```\n   *\n   * @param {function} labelOrSpy A string to use as the label when printing\n   * debug information on the console, or a 'spy' function that takes an event\n   * as argument, and does not need to return anything.\n   * @return {Stream}\n   */\n  debug(labelOrSpy?: string | ((t: T) => any)): Stream<T> {\n    return new (this.ctor())<T>(new Debug<T>(this, labelOrSpy));\n  }\n\n  /**\n   * *imitate* changes this current Stream to emit the same events that the\n   * `other` given Stream does. This method returns nothing.\n   *\n   * This method exists to allow one thing: **circular dependency of streams**.\n   * For instance, let's imagine that for some reason you need to create a\n   * circular dependency where stream `first$` depends on stream `second$`\n   * which in turn depends on `first$`:\n   *\n   * <!-- skip-example -->\n   * ```js\n   * import delay from 'xstream/extra/delay'\n   *\n   * var first$ = second$.map(x => x * 10).take(3);\n   * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));\n   * ```\n   *\n   * However, that is invalid JavaScript, because `second$` is undefined\n   * on the first line. This is how *imitate* can help solve it:\n   *\n   * ```js\n   * import delay from 'xstream/extra/delay'\n   *\n   * var secondProxy$ = xs.create();\n   * var first$ = secondProxy$.map(x => x * 10).take(3);\n   * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));\n   * secondProxy$.imitate(second$);\n   * ```\n   *\n   * We create `secondProxy$` before the others, so it can be used in the\n   * declaration of `first$`. Then, after both `first$` and `second$` are\n   * defined, we hook `secondProxy$` with `second$` with `imitate()` to tell\n   * that they are \"the same\". `imitate` will not trigger the start of any\n   * stream, it just binds `secondProxy$` and `second$` together.\n   *\n   * The following is an example where `imitate()` is important in Cycle.js\n   * applications. A parent component contains some child components. A child\n   * has an action stream which is given to the parent to define its state:\n   *\n   * <!-- skip-example -->\n   * ```js\n   * const childActionProxy$ = xs.create();\n   * const parent = Parent({...sources, childAction$: childActionProxy$});\n   * const childAction$ = parent.state$.map(s => s.child.action$).flatten();\n   * childActionProxy$.imitate(childAction$);\n   * ```\n   *\n   * Note, though, that **`imitate()` does not support MemoryStreams**. If we\n   * would attempt to imitate a MemoryStream in a circular dependency, we would\n   * either get a race condition (where the symptom would be \"nothing happens\")\n   * or an infinite cyclic emission of values. It's useful to think about\n   * MemoryStreams as cells in a spreadsheet. It doesn't make any sense to\n   * define a spreadsheet cell `A1` with a formula that depends on `B1` and\n   * cell `B1` defined with a formula that depends on `A1`.\n   *\n   * If you find yourself wanting to use `imitate()` with a\n   * MemoryStream, you should rework your code around `imitate()` to use a\n   * Stream instead. Look for the stream in the circular dependency that\n   * represents an event stream, and that would be a candidate for creating a\n   * proxy Stream which then imitates the target Stream.\n   *\n   * @param {Stream} target The other stream to imitate on the current one. Must\n   * not be a MemoryStream.\n   */\n  imitate(target: Stream<T>): void {\n    if (target instanceof MemoryStream)\n      throw new Error('A MemoryStream was given to imitate(), but it only ' +\n      'supports a Stream. Read more about this restriction here: ' +\n      'https://github.com/staltz/xstream#faq');\n    this._target = target;\n    for (let ils = this._ils, N = ils.length, i = 0; i < N; i++) target._add(ils[i]);\n    this._ils = [];\n  }\n\n  /**\n   * Forces the Stream to emit the given value to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   *\n   * @param value The \"next\" value you want to broadcast to all listeners of\n   * this Stream.\n   */\n  shamefullySendNext(value: T) {\n    this._n(value);\n  }\n\n  /**\n   * Forces the Stream to emit the given error to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   *\n   * @param {any} error The error you want to broadcast to all the listeners of\n   * this Stream.\n   */\n  shamefullySendError(error: any) {\n    this._e(error);\n  }\n\n  /**\n   * Forces the Stream to emit the \"completed\" event to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   */\n  shamefullySendComplete() {\n    this._c();\n  }\n\n  /**\n   * Adds a \"debug\" listener to the stream. There can only be one debug\n   * listener, that's why this is 'setDebugListener'. To remove the debug\n   * listener, just call setDebugListener(null).\n   *\n   * A debug listener is like any other listener. The only difference is that a\n   * debug listener is \"stealthy\": its presence/absence does not trigger the\n   * start/stop of the stream (or the producer inside the stream). This is\n   * useful so you can inspect what is going on without changing the behavior\n   * of the program. If you have an idle stream and you add a normal listener to\n   * it, the stream will start executing. But if you set a debug listener on an\n   * idle stream, it won't start executing (not until the first normal listener\n   * is added).\n   *\n   * As the name indicates, we don't recommend using this method to build app\n   * logic. In fact, in most cases the debug operator works just fine. Only use\n   * this one if you know what you're doing.\n   *\n   * @param {Listener<T>} listener\n   */\n  setDebugListener(listener: Partial<Listener<T>> | null | undefined) {\n    if (!listener) {\n      this._d = false;\n      this._dl = NO as InternalListener<T>;\n    } else {\n      this._d = true;\n      (listener as InternalListener<T>)._n = listener.next || noop;\n      (listener as InternalListener<T>)._e = listener.error || noop;\n      (listener as InternalListener<T>)._c = listener.complete || noop;\n      this._dl = listener as InternalListener<T>;\n    }\n  }\n}\n\nexport class MemoryStream<T> extends Stream<T> {\n  private _v: T;\n  private _has: boolean = false;\n  constructor(producer: InternalProducer<T>) {\n    super(producer);\n  }\n\n  _n(x: T) {\n    this._v = x;\n    this._has = true;\n    super._n(x);\n  }\n\n  _add(il: InternalListener<T>): void {\n    const ta = this._target;\n    if (ta !== NO) return ta._add(il);\n    const a = this._ils;\n    a.push(il);\n    if (a.length > 1) {\n      if (this._has) il._n(this._v);\n      return;\n    }\n    if (this._stopID !== NO) {\n      if (this._has) il._n(this._v);\n      clearTimeout(this._stopID);\n      this._stopID = NO;\n    } else if (this._has) il._n(this._v); else {\n      const p = this._prod;\n      if (p !== NO) p._start(this);\n    }\n  }\n\n  _stopNow() {\n    this._has = false;\n    super._stopNow();\n  }\n\n  _x(): void {\n    this._has = false;\n    super._x();\n  }\n\n  map<U>(project: (t: T) => U): MemoryStream<U> {\n    return this._map(project) as MemoryStream<U>;\n  }\n\n  mapTo<U>(projectedValue: U): MemoryStream<U> {\n    return super.mapTo(projectedValue) as MemoryStream<U>;\n  }\n\n  take(amount: number): MemoryStream<T> {\n    return super.take(amount) as MemoryStream<T>;\n  }\n\n  endWhen(other: Stream<any>): MemoryStream<T> {\n    return super.endWhen(other) as MemoryStream<T>;\n  }\n\n  replaceError(replace: (err: any) => Stream<T>): MemoryStream<T> {\n    return super.replaceError(replace) as MemoryStream<T>;\n  }\n\n  remember(): MemoryStream<T> {\n    return this;\n  }\n\n  debug(): MemoryStream<T>;\n  debug(labelOrSpy: string): MemoryStream<T>;\n  debug(labelOrSpy: (t: T) => any): MemoryStream<T>;\n  debug(labelOrSpy?: string | ((t: T) => any) | undefined): MemoryStream<T> {\n    return super.debug(labelOrSpy as any) as MemoryStream<T>;\n  }\n}\n\nexport {NO, NO_IL};\nconst xs = Stream;\ntype xs<T> = Stream<T>;\nexport default xs;\n","import {Operator, Stream} from '../index';\nconst empty = {};\n\nexport class DropRepeatsOperator<T> implements Operator<T, T> {\n  public type = 'dropRepeats';\n  public out: Stream<T> = null as any;\n  public isEq: (x: T, y: T) => boolean;\n  private v: T = <any> empty;\n\n  constructor(public ins: Stream<T>,\n              fn: ((x: T, y: T) => boolean) | undefined) {\n    this.isEq = fn ? fn : (x, y) => x === y;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = null as any;\n    this.v = empty as any;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (!u) return;\n    const v = this.v;\n    if (v !== empty && this.isEq(t, v)) return;\n    this.v = t;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (!u) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (!u) return;\n    u._c();\n  }\n}\n\n/**\n * Drops consecutive duplicate values in a stream.\n *\n * Marble diagram:\n *\n * ```text\n * --1--2--1--1--1--2--3--4--3--3|\n *     dropRepeats\n * --1--2--1--------2--3--4--3---|\n * ```\n *\n * Example:\n *\n * ```js\n * import dropRepeats from 'xstream/extra/dropRepeats'\n *\n * const stream = xs.of(1, 2, 1, 1, 1, 2, 3, 4, 3, 3)\n *   .compose(dropRepeats())\n *\n * stream.addListener({\n *   next: i => console.log(i),\n *   error: err => console.error(err),\n *   complete: () => console.log('completed')\n * })\n * ```\n *\n * ```text\n * > 1\n * > 2\n * > 1\n * > 2\n * > 3\n * > 4\n * > 3\n * > completed\n * ```\n *\n * Example with a custom isEqual function:\n *\n * ```js\n * import dropRepeats from 'xstream/extra/dropRepeats'\n *\n * const stream = xs.of('a', 'b', 'a', 'A', 'B', 'b')\n *   .compose(dropRepeats((x, y) => x.toLowerCase() === y.toLowerCase()))\n *\n * stream.addListener({\n *   next: i => console.log(i),\n *   error: err => console.error(err),\n *   complete: () => console.log('completed')\n * })\n * ```\n *\n * ```text\n * > a\n * > b\n * > a\n * > B\n * > completed\n * ```\n *\n * @param {Function} isEqual An optional function of type\n * `(x: T, y: T) => boolean` that takes an event from the input stream and\n * checks if it is equal to previous event, by returning a boolean.\n * @return {Stream}\n */\nexport default function dropRepeats<T>(isEqual: ((x: T, y: T) => boolean) | undefined = void 0): (ins: Stream<T>) => Stream<T> {\n  return function dropRepeatsOperator(ins: Stream<T>): Stream<T> {\n    return new Stream<T>(new DropRepeatsOperator<T>(ins, isEqual));\n  };\n}\n","export interface ICircularBuffer {\n  write(data: Float32Array): void;\n\n  readLast(length: number): Float32Array;\n}\n\nexport class CircularBuffer implements ICircularBuffer {\n  private readonly buffer: Float32Array;\n  private offset: number = 0;\n\n  constructor(size: number) {\n    this.buffer = new Float32Array(size);\n    this.offset = 0;\n  }\n\n  write(data: Float32Array) {\n    if (this.offset + data.length > this.buffer.length) {\n      this.buffer.set(\n        data.subarray(0, this.buffer.length - this.offset),\n        this.offset\n      );\n      this.buffer.set(data.subarray(this.buffer.length - this.offset));\n      this.offset = this.buffer.length - this.offset;\n    } else {\n      this.buffer.set(data, this.offset);\n      this.offset += data.length;\n    }\n  }\n\n  readLast(length: number): Float32Array {\n    length = Math.min(this.buffer.length, length);\n\n    if (length <= this.offset) {\n      return this.buffer.slice(this.offset - length, this.offset);\n    }\n\n    const output = new Float32Array(length);\n\n    output.set(\n      this.buffer.subarray(this.buffer.length - (length - this.offset))\n    );\n    output.set(this.buffer.subarray(0, this.offset), length - this.offset);\n\n    return output;\n  }\n}\n\nexport default CircularBuffer;\n","export interface IVoiceDetector {\n  write(data: Float32Array): void;\n\n  isHearingVoice(): boolean;\n}\n\nexport class AverageAmplitudeVoiceDetector implements IVoiceDetector {\n  private readonly sampleCount: number;\n  private threshold: number;\n\n  private avg: number = 0;\n\n  constructor(threshold: number, sampleCount: number) {\n    this.sampleCount = sampleCount;\n    this.threshold = threshold;\n  }\n\n  write(data: Float32Array) {\n    const sum = data.map(Math.abs).reduce((a, b) => a + b);\n\n    this.avg *= 1 - data.length / this.sampleCount;\n    this.avg += sum / this.sampleCount;\n  }\n\n  isHearingVoice() {\n    return this.avg > this.threshold;\n  }\n\n  setThreshold(value: number) {\n    this.threshold = value;\n  }\n}\n\nexport default AverageAmplitudeVoiceDetector;\n","/**\n * Utility function to filter actions by key with type narrowing\n */\nexport const ofType = <T extends { key: string }, K extends string>(key: K) => (\n  action: T\n): action is Extract<T, { key: K }> => {\n  return action.key == key;\n};\n\n/**\n * Another simple utility function which filters by the value\n */\nexport const is = <T>(x: T) => (y: T) => x === y;\n","import xs, { Stream } from \"xstream\";\nimport dropRepeats from \"xstream/extra/dropRepeats\";\nimport CircularBuffer from \"./CircularBuffer\";\nimport VoiceDetector from \"./VoiceDetector\";\nimport { ofType, is } from \"../utils\";\n\n/**\n * Size of the buffer allocated for storage of the recorded speech\n *\n * 2646000 is enough to fit 1 minute of audio at 44100 sample rate.\n */\nexport const BUFFER_SIZE = 2646000;\n\n/**\n * Values necessary for the worker to function\n */\nexport interface Settings {\n  /**\n   * Sample rate of the recorded stream as the number of samples per second\n   */\n  sampleRate: number;\n\n  /**\n   * Duration in seconds for which the average amplitude is being collected\n   */\n  silenceDuration: number;\n\n  /**\n   * Amplitude threshold which separates speech from silence specified\n   * as a floating point number number between 0 and 1\n   */\n  amplitudeThreshold: number;\n\n  /**\n   * Duration of the audio caputred before the beginning of speech\n   */\n  contextDuration: number;\n}\n\n/**\n * Input messages sent to the worker\n */\ntype Action =\n  | {\n      key: \"start\";\n      data: Settings;\n    }\n  | {\n      key: \"process\";\n      data: Float32Array;\n    }\n  | {\n      key: \"update_settings\";\n      data: Partial<Settings>;\n    }\n  | {\n      key: \"stop\";\n    };\n\n/**\n * Outgoing messages dispatched by the worker\n */\ntype Event =\n  | {\n      key: \"voice_start\";\n    }\n  | {\n      key: \"voice_end\";\n      data: Float32Array;\n    };\n\n/**\n * Create a stream which emits at\n */\nconst createVoiceDetectorStream = (\n  action$: Stream<Action>,\n  sampleRate: number,\n  silenceDuration: number,\n  amplitudeThreshold: number\n): Stream<boolean> => {\n  const voiceDetector = new VoiceDetector(\n    amplitudeThreshold,\n    silenceDuration * sampleRate\n  );\n\n  action$.filter(ofType(\"process\")).subscribe({\n    next: action => voiceDetector.write(action.data)\n  });\n\n  action$.filter(ofType(\"update_settings\")).subscribe({\n    next: action => {\n      if (action.data.amplitudeThreshold) {\n        voiceDetector.setThreshold(action.data.amplitudeThreshold);\n      }\n    }\n  });\n\n  return action$\n    .map(() => voiceDetector.isHearingVoice())\n    .compose(dropRepeats());\n};\n\n/**\n * Create a stream which\n */\nconst createSpeechCaptureStream = (\n  action$: Stream<Action>,\n  sampleRate: number,\n  contextDuration: number,\n  isHearingVoice$: Stream<boolean>\n): Stream<Float32Array> => {\n  const buffer = new CircularBuffer(BUFFER_SIZE);\n\n  action$.filter(ofType(\"process\")).subscribe({\n    next: action => buffer.write(action.data)\n  });\n\n  return isHearingVoice$\n    .filter(is(true))\n    .map(() => {\n      let recordingLength = contextDuration * sampleRate;\n\n      action$.filter(ofType(\"process\")).subscribe({\n        next: action => {\n          recordingLength += action.data.length;\n        }\n      });\n\n      return isHearingVoice$\n        .filter(is(false))\n        .map(() => buffer.readLast(recordingLength))\n        .take(1);\n    })\n    .flatten();\n};\n\n/**\n * This function handles outside commands, analyzing the audio and\n * producing a stream of events to drive the UI..\n */\nconst createStreamProcessor = (action$: Stream<Action>): Stream<Event> => {\n  return action$\n    .filter(ofType(\"start\"))\n    .map(action => {\n      const {\n        sampleRate,\n        silenceDuration,\n        amplitudeThreshold,\n        contextDuration\n      } = action.data;\n      const isHearingVoice$ = createVoiceDetectorStream(\n        action$,\n        sampleRate,\n        silenceDuration,\n        amplitudeThreshold\n      );\n      const capturedSentence$ = createSpeechCaptureStream(\n        action$,\n        sampleRate,\n        contextDuration,\n        isHearingVoice$\n      );\n\n      return xs\n        .merge(\n          isHearingVoice$.filter(is(true)).mapTo<Event>({ key: \"voice_start\" }),\n          capturedSentence$.map<Event>(data => ({ key: \"voice_end\", data }))\n        )\n        .endWhen(action$.filter(ofType(\"stop\")));\n    })\n    .flatten();\n};\n\nconst ctx: Worker = self as any;\n\nconst action$ = xs.create<Action>({\n  start: listener => {\n    ctx.onmessage = e => listener.next(e.data);\n  },\n  stop: () => {\n    ctx.onmessage = null;\n  }\n});\n\ncreateStreamProcessor(action$).subscribe({\n  next: ctx.postMessage.bind(ctx),\n  error: console.error\n});\n\nexport type InputWorkerEvent = Action;\nexport type OutputWorkerEvent = Event;\n"]}